/*
 * Aspose.PDF for AWS
 * Aspose.Pdf for AWS provides a comprehensive set of endpoints for various PDF-related tasks, enabling efficient document processing and manipulation. Users can retrieve processing status, download files, manage file locks, parse documents, redact sensitive information, convert between formats, merge files, add watermarks, perform text searches, and much more. With endpoints for tasks like electronic signing, document comparison, and form filling, the API offers extensive functionality to cater to diverse PDF requirements.
 *
 * OpenAPI spec version: v1
 * Contact: sales@aspose.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CompressType;
import java.io.File;
import io.swagger.client.model.FileResponse;
import io.swagger.client.model.HashAlgorithm;
import io.swagger.client.model.MergeImageType;
import io.swagger.client.model.MetadataOperation;
import io.swagger.client.model.PageNumberHorizontalAlign;
import io.swagger.client.model.PageNumberVerticalAlign;
import io.swagger.client.model.PageSize;
import io.swagger.client.model.ResizePageSize;
import io.swagger.client.model.ResizePresetSize;
import io.swagger.client.model.ResizePresetType;
import io.swagger.client.model.ResizeType;
import io.swagger.client.model.RotateAngle;
import io.swagger.client.model.RotateType;
import io.swagger.client.model.SignatureType;
import io.swagger.client.model.SplitDocType;
import io.swagger.client.model.SplitImageType;
import io.swagger.client.model.WatermarkType;
import io.swagger.client.model.XmlType;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiApi {
    private ApiClient apiClient;

    public ApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for pdfWebapiAddnumberPost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param vAlignment The vertical alignment of the page numbers. (optional)
     * @param hAlignment The horizontal alignment of the page numbers. (optional)
     * @param startingNumber The starting number for the page numbers. (optional)
     * @param sNumber The number of the first page to start numbering from. (optional)
     * @param fNumber The number of the last page to end numbering at. (optional)
     * @param margin The margin around the page numbers. (optional)
     * @param fontSize The font size of the page numbers. (optional)
     * @param format The format of the page numbers. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiAddnumberPostCall(List<File> files, String documentPassword, PageNumberVerticalAlign vAlignment, PageNumberHorizontalAlign hAlignment, Integer startingNumber, Integer sNumber, Integer fNumber, Integer margin, Integer fontSize, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/addnumber";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (vAlignment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vAlignment", vAlignment));
        if (hAlignment != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("hAlignment", hAlignment));
        if (startingNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("startingNumber", startingNumber));
        if (sNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("sNumber", sNumber));
        if (fNumber != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fNumber", fNumber));
        if (margin != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("margin", margin));
        if (fontSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fontSize", fontSize));
        if (format != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("format", format));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiAddnumberPostValidateBeforeCall(List<File> files, String documentPassword, PageNumberVerticalAlign vAlignment, PageNumberHorizontalAlign hAlignment, Integer startingNumber, Integer sNumber, Integer fNumber, Integer margin, Integer fontSize, String format, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiAddnumberPostCall(files, documentPassword, vAlignment, hAlignment, startingNumber, sNumber, fNumber, margin, fontSize, format, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Page Numbers to Document.
     * Adds page numbers to your documents based on specified alignment, starting number, and format. The service ensures that page numbers are accurately applied, improving the readability and professionalism of your documents. It supports various formats, including DOC, PPTX, TIFF, DOCX, and PDF, to cater to your specific requirements.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param vAlignment The vertical alignment of the page numbers. (optional)
     * @param hAlignment The horizontal alignment of the page numbers. (optional)
     * @param startingNumber The starting number for the page numbers. (optional)
     * @param sNumber The number of the first page to start numbering from. (optional)
     * @param fNumber The number of the last page to end numbering at. (optional)
     * @param margin The margin around the page numbers. (optional)
     * @param fontSize The font size of the page numbers. (optional)
     * @param format The format of the page numbers. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiAddnumberPost(List<File> files, String documentPassword, PageNumberVerticalAlign vAlignment, PageNumberHorizontalAlign hAlignment, Integer startingNumber, Integer sNumber, Integer fNumber, Integer margin, Integer fontSize, String format) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiAddnumberPostWithHttpInfo(files, documentPassword, vAlignment, hAlignment, startingNumber, sNumber, fNumber, margin, fontSize, format);
        return resp.getData();
    }

    /**
     * Add Page Numbers to Document.
     * Adds page numbers to your documents based on specified alignment, starting number, and format. The service ensures that page numbers are accurately applied, improving the readability and professionalism of your documents. It supports various formats, including DOC, PPTX, TIFF, DOCX, and PDF, to cater to your specific requirements.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param vAlignment The vertical alignment of the page numbers. (optional)
     * @param hAlignment The horizontal alignment of the page numbers. (optional)
     * @param startingNumber The starting number for the page numbers. (optional)
     * @param sNumber The number of the first page to start numbering from. (optional)
     * @param fNumber The number of the last page to end numbering at. (optional)
     * @param margin The margin around the page numbers. (optional)
     * @param fontSize The font size of the page numbers. (optional)
     * @param format The format of the page numbers. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiAddnumberPostWithHttpInfo(List<File> files, String documentPassword, PageNumberVerticalAlign vAlignment, PageNumberHorizontalAlign hAlignment, Integer startingNumber, Integer sNumber, Integer fNumber, Integer margin, Integer fontSize, String format) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiAddnumberPostValidateBeforeCall(files, documentPassword, vAlignment, hAlignment, startingNumber, sNumber, fNumber, margin, fontSize, format, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Page Numbers to Document. (asynchronously)
     * Adds page numbers to your documents based on specified alignment, starting number, and format. The service ensures that page numbers are accurately applied, improving the readability and professionalism of your documents. It supports various formats, including DOC, PPTX, TIFF, DOCX, and PDF, to cater to your specific requirements.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param vAlignment The vertical alignment of the page numbers. (optional)
     * @param hAlignment The horizontal alignment of the page numbers. (optional)
     * @param startingNumber The starting number for the page numbers. (optional)
     * @param sNumber The number of the first page to start numbering from. (optional)
     * @param fNumber The number of the last page to end numbering at. (optional)
     * @param margin The margin around the page numbers. (optional)
     * @param fontSize The font size of the page numbers. (optional)
     * @param format The format of the page numbers. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiAddnumberPostAsync(List<File> files, String documentPassword, PageNumberVerticalAlign vAlignment, PageNumberHorizontalAlign hAlignment, Integer startingNumber, Integer sNumber, Integer fNumber, Integer margin, Integer fontSize, String format, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiAddnumberPostValidateBeforeCall(files, documentPassword, vAlignment, hAlignment, startingNumber, sNumber, fNumber, margin, fontSize, format, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiChangeFontsPost
     * @param fontReplacementsJson  (optional)
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiChangeFontsPostCall(String fontReplacementsJson, List<File> files, String documentPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/change-fonts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (fontReplacementsJson != null)
        localVarFormParams.put("fontReplacementsJson", fontReplacementsJson);
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiChangeFontsPostValidateBeforeCall(String fontReplacementsJson, List<File> files, String documentPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiChangeFontsPostCall(fontReplacementsJson, files, documentPassword, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Change Fonts in Provided Files.
     * Updates the fonts in your documents according to specified replacements.  Provide the font replacement details as a JSON string and upload your files using multipart/form-data.The service processes these requests asynchronously using Kafka, ensuring efficient handling of your files.
     * @param fontReplacementsJson  (optional)
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiChangeFontsPost(String fontReplacementsJson, List<File> files, String documentPassword) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiChangeFontsPostWithHttpInfo(fontReplacementsJson, files, documentPassword);
        return resp.getData();
    }

    /**
     * Change Fonts in Provided Files.
     * Updates the fonts in your documents according to specified replacements.  Provide the font replacement details as a JSON string and upload your files using multipart/form-data.The service processes these requests asynchronously using Kafka, ensuring efficient handling of your files.
     * @param fontReplacementsJson  (optional)
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiChangeFontsPostWithHttpInfo(String fontReplacementsJson, List<File> files, String documentPassword) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiChangeFontsPostValidateBeforeCall(fontReplacementsJson, files, documentPassword, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Change Fonts in Provided Files. (asynchronously)
     * Updates the fonts in your documents according to specified replacements.  Provide the font replacement details as a JSON string and upload your files using multipart/form-data.The service processes these requests asynchronously using Kafka, ensuring efficient handling of your files.
     * @param fontReplacementsJson  (optional)
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiChangeFontsPostAsync(String fontReplacementsJson, List<File> files, String documentPassword, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiChangeFontsPostValidateBeforeCall(fontReplacementsJson, files, documentPassword, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiComparisonPost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiComparisonPostCall(List<File> files, String documentPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/comparison";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiComparisonPostValidateBeforeCall(List<File> files, String documentPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiComparisonPostCall(files, documentPassword, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Compare documents text.
     * Compares the text of the provided documents and highlights the differences. Upload the files you want to compare, and the service will analyze them to detect any changes in the text. The result is a new document that clearly marks all text variations, making it easy to review and understand the modifications between the original and updated versions.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiComparisonPost(List<File> files, String documentPassword) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiComparisonPostWithHttpInfo(files, documentPassword);
        return resp.getData();
    }

    /**
     * Compare documents text.
     * Compares the text of the provided documents and highlights the differences. Upload the files you want to compare, and the service will analyze them to detect any changes in the text. The result is a new document that clearly marks all text variations, making it easy to review and understand the modifications between the original and updated versions.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiComparisonPostWithHttpInfo(List<File> files, String documentPassword) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiComparisonPostValidateBeforeCall(files, documentPassword, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Compare documents text. (asynchronously)
     * Compares the text of the provided documents and highlights the differences. Upload the files you want to compare, and the service will analyze them to detect any changes in the text. The result is a new document that clearly marks all text variations, making it easy to review and understand the modifications between the original and updated versions.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiComparisonPostAsync(List<File> files, String documentPassword, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiComparisonPostValidateBeforeCall(files, documentPassword, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiCompressPost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param compressType The level of compression to use. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiCompressPostCall(List<File> files, String documentPassword, CompressType compressType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/compress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (compressType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("compressType", compressType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiCompressPostValidateBeforeCall(List<File> files, String documentPassword, CompressType compressType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiCompressPostCall(files, documentPassword, compressType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Compress Document.
     * Compresses the provided documents to reduce their file size based on the specified compression level. Upload the documents and choose the desired compression level. The service will reduce the file sizes while maintaining quality, resulting in compressed files that are easier to handle and share, saving storage space and reducing upload and download times.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param compressType The level of compression to use. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiCompressPost(List<File> files, String documentPassword, CompressType compressType) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiCompressPostWithHttpInfo(files, documentPassword, compressType);
        return resp.getData();
    }

    /**
     * Compress Document.
     * Compresses the provided documents to reduce their file size based on the specified compression level. Upload the documents and choose the desired compression level. The service will reduce the file sizes while maintaining quality, resulting in compressed files that are easier to handle and share, saving storage space and reducing upload and download times.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param compressType The level of compression to use. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiCompressPostWithHttpInfo(List<File> files, String documentPassword, CompressType compressType) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiCompressPostValidateBeforeCall(files, documentPassword, compressType, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Compress Document. (asynchronously)
     * Compresses the provided documents to reduce their file size based on the specified compression level. Upload the documents and choose the desired compression level. The service will reduce the file sizes while maintaining quality, resulting in compressed files that are easier to handle and share, saving storage space and reducing upload and download times.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param compressType The level of compression to use. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiCompressPostAsync(List<File> files, String documentPassword, CompressType compressType, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiCompressPostValidateBeforeCall(files, documentPassword, compressType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiConvertPost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param xmlType The type of XML conversion to perform, if applicable. (optional)
     * @param xmlTag The XML tag to use for conversion, if applicable. (optional)
     * @param fontSise  (optional)
     * @param isToSingle Indicates whether the conversion should result in a single file, if applicable. (optional)
     * @param separator The separator to use when converting, if applicable. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiConvertPostCall(List<File> files, String documentPassword, String inputType, String outputType, XmlType xmlType, String xmlTag, Integer fontSise, Boolean isToSingle, String separator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/convert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));
        if (xmlType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xmlType", xmlType));
        if (xmlTag != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("xmlTag", xmlTag));
        if (fontSise != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("fontSise", fontSise));
        if (isToSingle != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isToSingle", isToSingle));
        if (separator != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("separator", separator));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiConvertPostValidateBeforeCall(List<File> files, String documentPassword, String inputType, String outputType, XmlType xmlType, String xmlTag, Integer fontSise, Boolean isToSingle, String separator, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiConvertPostCall(files, documentPassword, inputType, outputType, xmlType, xmlTag, fontSise, isToSingle, separator, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Convert Document to Another Format.
     * Converts documents from one format to another seamlessly. Upload the files you need to convert and specify the target format. The service will handle the conversion process efficiently, ensuring that the resulting document is ready for use in the desired format and compatible with various applications and systems.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param xmlType The type of XML conversion to perform, if applicable. (optional)
     * @param xmlTag The XML tag to use for conversion, if applicable. (optional)
     * @param fontSise  (optional)
     * @param isToSingle Indicates whether the conversion should result in a single file, if applicable. (optional)
     * @param separator The separator to use when converting, if applicable. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiConvertPost(List<File> files, String documentPassword, String inputType, String outputType, XmlType xmlType, String xmlTag, Integer fontSise, Boolean isToSingle, String separator) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiConvertPostWithHttpInfo(files, documentPassword, inputType, outputType, xmlType, xmlTag, fontSise, isToSingle, separator);
        return resp.getData();
    }

    /**
     * Convert Document to Another Format.
     * Converts documents from one format to another seamlessly. Upload the files you need to convert and specify the target format. The service will handle the conversion process efficiently, ensuring that the resulting document is ready for use in the desired format and compatible with various applications and systems.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param xmlType The type of XML conversion to perform, if applicable. (optional)
     * @param xmlTag The XML tag to use for conversion, if applicable. (optional)
     * @param fontSise  (optional)
     * @param isToSingle Indicates whether the conversion should result in a single file, if applicable. (optional)
     * @param separator The separator to use when converting, if applicable. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiConvertPostWithHttpInfo(List<File> files, String documentPassword, String inputType, String outputType, XmlType xmlType, String xmlTag, Integer fontSise, Boolean isToSingle, String separator) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiConvertPostValidateBeforeCall(files, documentPassword, inputType, outputType, xmlType, xmlTag, fontSise, isToSingle, separator, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert Document to Another Format. (asynchronously)
     * Converts documents from one format to another seamlessly. Upload the files you need to convert and specify the target format. The service will handle the conversion process efficiently, ensuring that the resulting document is ready for use in the desired format and compatible with various applications and systems.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param xmlType The type of XML conversion to perform, if applicable. (optional)
     * @param xmlTag The XML tag to use for conversion, if applicable. (optional)
     * @param fontSise  (optional)
     * @param isToSingle Indicates whether the conversion should result in a single file, if applicable. (optional)
     * @param separator The separator to use when converting, if applicable. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiConvertPostAsync(List<File> files, String documentPassword, String inputType, String outputType, XmlType xmlType, String xmlTag, Integer fontSise, Boolean isToSingle, String separator, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiConvertPostValidateBeforeCall(files, documentPassword, inputType, outputType, xmlType, xmlTag, fontSise, isToSingle, separator, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiConvertWebpagePost
     * @param webPage  (optional)
     * @param documentPassword  (optional)
     * @param outputType The desired format for the output file. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiConvertWebpagePostCall(String webPage, String documentPassword, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/convert-webpage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (webPage != null)
        localVarFormParams.put("webPage", webPage);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiConvertWebpagePostValidateBeforeCall(String webPage, String documentPassword, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiConvertWebpagePostCall(webPage, documentPassword, outputType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Convert Web Page to Document.
     * Converts a web page to a document in the specified output format. Provide the URL of the web page and choose the desired format for conversion. The service will create a document that mirrors the content and layout of the original web page, ensuring it is well-formatted and suitable for your needs.
     * @param webPage  (optional)
     * @param documentPassword  (optional)
     * @param outputType The desired format for the output file. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiConvertWebpagePost(String webPage, String documentPassword, String outputType) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiConvertWebpagePostWithHttpInfo(webPage, documentPassword, outputType);
        return resp.getData();
    }

    /**
     * Convert Web Page to Document.
     * Converts a web page to a document in the specified output format. Provide the URL of the web page and choose the desired format for conversion. The service will create a document that mirrors the content and layout of the original web page, ensuring it is well-formatted and suitable for your needs.
     * @param webPage  (optional)
     * @param documentPassword  (optional)
     * @param outputType The desired format for the output file. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiConvertWebpagePostWithHttpInfo(String webPage, String documentPassword, String outputType) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiConvertWebpagePostValidateBeforeCall(webPage, documentPassword, outputType, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert Web Page to Document. (asynchronously)
     * Converts a web page to a document in the specified output format. Provide the URL of the web page and choose the desired format for conversion. The service will create a document that mirrors the content and layout of the original web page, ensuring it is well-formatted and suitable for your needs.
     * @param webPage  (optional)
     * @param documentPassword  (optional)
     * @param outputType The desired format for the output file. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiConvertWebpagePostAsync(String webPage, String documentPassword, String outputType, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiConvertWebpagePostValidateBeforeCall(webPage, documentPassword, outputType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiCropPost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param top The number of pixels to crop from the top. (optional)
     * @param right The number of pixels to crop from the right. (optional)
     * @param bottom The number of pixels to crop from the bottom. (optional)
     * @param left The number of pixels to crop from the left. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiCropPostCall(List<File> files, String documentPassword, String inputType, Integer top, Integer right, Integer bottom, Integer left, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/crop";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (top != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("top", top));
        if (right != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("right", right));
        if (bottom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bottom", bottom));
        if (left != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("left", left));
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiCropPostValidateBeforeCall(List<File> files, String documentPassword, String inputType, Integer top, Integer right, Integer bottom, Integer left, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiCropPostCall(files, documentPassword, inputType, top, right, bottom, left, outputType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Crop Document.
     * Crops the provided document to the specified dimensions by removing unwanted areas. Upload the document and specify the dimensions for cropping. The service will adjust the file accordingly, resulting in a precisely cropped document that meets your requirements.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param top The number of pixels to crop from the top. (optional)
     * @param right The number of pixels to crop from the right. (optional)
     * @param bottom The number of pixels to crop from the bottom. (optional)
     * @param left The number of pixels to crop from the left. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiCropPost(List<File> files, String documentPassword, String inputType, Integer top, Integer right, Integer bottom, Integer left, String outputType) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiCropPostWithHttpInfo(files, documentPassword, inputType, top, right, bottom, left, outputType);
        return resp.getData();
    }

    /**
     * Crop Document.
     * Crops the provided document to the specified dimensions by removing unwanted areas. Upload the document and specify the dimensions for cropping. The service will adjust the file accordingly, resulting in a precisely cropped document that meets your requirements.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param top The number of pixels to crop from the top. (optional)
     * @param right The number of pixels to crop from the right. (optional)
     * @param bottom The number of pixels to crop from the bottom. (optional)
     * @param left The number of pixels to crop from the left. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiCropPostWithHttpInfo(List<File> files, String documentPassword, String inputType, Integer top, Integer right, Integer bottom, Integer left, String outputType) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiCropPostValidateBeforeCall(files, documentPassword, inputType, top, right, bottom, left, outputType, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Crop Document. (asynchronously)
     * Crops the provided document to the specified dimensions by removing unwanted areas. Upload the document and specify the dimensions for cropping. The service will adjust the file accordingly, resulting in a precisely cropped document that meets your requirements.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param top The number of pixels to crop from the top. (optional)
     * @param right The number of pixels to crop from the right. (optional)
     * @param bottom The number of pixels to crop from the bottom. (optional)
     * @param left The number of pixels to crop from the left. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiCropPostAsync(List<File> files, String documentPassword, String inputType, Integer top, Integer right, Integer bottom, Integer left, String outputType, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiCropPostValidateBeforeCall(files, documentPassword, inputType, top, right, bottom, left, outputType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiDownloadIdGet
     * @param id The id of the processing to download. (required)
     * @param file The name of the file to download. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiDownloadIdGetCall(String id, String file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/download/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (file != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("file", file));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiDownloadIdGetValidateBeforeCall(String id, String file, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling pdfWebapiDownloadIdGet(Async)");
        }
        
        com.squareup.okhttp.Call call = pdfWebapiDownloadIdGetCall(id, file, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * File download.
     * Downloads processed file.
     * @param id The id of the processing to download. (required)
     * @param file The name of the file to download. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void pdfWebapiDownloadIdGet(String id, String file) throws ApiException {
        pdfWebapiDownloadIdGetWithHttpInfo(id, file);
    }

    /**
     * File download.
     * Downloads processed file.
     * @param id The id of the processing to download. (required)
     * @param file The name of the file to download. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> pdfWebapiDownloadIdGetWithHttpInfo(String id, String file) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiDownloadIdGetValidateBeforeCall(id, file, null, null);
        return apiClient.execute(call);
    }

    /**
     * File download. (asynchronously)
     * Downloads processed file.
     * @param id The id of the processing to download. (required)
     * @param file The name of the file to download. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiDownloadIdGetAsync(String id, String file, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiDownloadIdGetValidateBeforeCall(id, file, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiEsignPost
     * @param passw  (optional)
     * @param initials  (optional)
     * @param invite  (optional)
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiEsignPostCall(String passw, String initials, String invite, List<File> files, String documentPassword, String inputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/esign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (passw != null)
        localVarFormParams.put("passw", passw);
        if (initials != null)
        localVarFormParams.put("initials", initials);
        if (invite != null)
        localVarFormParams.put("invite", invite);
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiEsignPostValidateBeforeCall(String passw, String initials, String invite, List<File> files, String documentPassword, String inputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiEsignPostCall(passw, initials, invite, files, documentPassword, inputType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Sign Document with Certificate.
     * Applies a digital signature to the provided document using the specified certificate. Upload the document and provide the certificate details, and the service will securely apply the signature, ensuring that the document is authenticated and legally binding.
     * @param passw  (optional)
     * @param initials  (optional)
     * @param invite  (optional)
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiEsignPost(String passw, String initials, String invite, List<File> files, String documentPassword, String inputType) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiEsignPostWithHttpInfo(passw, initials, invite, files, documentPassword, inputType);
        return resp.getData();
    }

    /**
     * Sign Document with Certificate.
     * Applies a digital signature to the provided document using the specified certificate. Upload the document and provide the certificate details, and the service will securely apply the signature, ensuring that the document is authenticated and legally binding.
     * @param passw  (optional)
     * @param initials  (optional)
     * @param invite  (optional)
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiEsignPostWithHttpInfo(String passw, String initials, String invite, List<File> files, String documentPassword, String inputType) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiEsignPostValidateBeforeCall(passw, initials, invite, files, documentPassword, inputType, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Sign Document with Certificate. (asynchronously)
     * Applies a digital signature to the provided document using the specified certificate. Upload the document and provide the certificate details, and the service will securely apply the signature, ensuring that the document is authenticated and legally binding.
     * @param passw  (optional)
     * @param initials  (optional)
     * @param invite  (optional)
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiEsignPostAsync(String passw, String initials, String invite, List<File> files, String documentPassword, String inputType, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiEsignPostValidateBeforeCall(passw, initials, invite, files, documentPassword, inputType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiExtractPost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiExtractPostCall(List<File> files, String documentPassword, String inputType, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/extract";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiExtractPostValidateBeforeCall(List<File> files, String documentPassword, String inputType, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiExtractPostCall(files, documentPassword, inputType, outputType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Extract Tables from Document.
     * Extracts tables from the provided document and converts them into the specified output format. Upload the document containing the tables and choose the format you prefer. The service will extract the tables and deliver them in the selected format, facilitating easier data usage and analysis.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiExtractPost(List<File> files, String documentPassword, String inputType, String outputType) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiExtractPostWithHttpInfo(files, documentPassword, inputType, outputType);
        return resp.getData();
    }

    /**
     * Extract Tables from Document.
     * Extracts tables from the provided document and converts them into the specified output format. Upload the document containing the tables and choose the format you prefer. The service will extract the tables and deliver them in the selected format, facilitating easier data usage and analysis.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiExtractPostWithHttpInfo(List<File> files, String documentPassword, String inputType, String outputType) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiExtractPostValidateBeforeCall(files, documentPassword, inputType, outputType, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Extract Tables from Document. (asynchronously)
     * Extracts tables from the provided document and converts them into the specified output format. Upload the document containing the tables and choose the format you prefer. The service will extract the tables and deliver them in the selected format, facilitating easier data usage and analysis.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiExtractPostAsync(List<File> files, String documentPassword, String inputType, String outputType, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiExtractPostValidateBeforeCall(files, documentPassword, inputType, outputType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiGifPost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param keepImagesAsIs Indicates whether the images should be kept as is. (optional)
     * @param resizeToImage The index of the image to resize the other images to. (optional)
     * @param streched  (optional)
     * @param width The width of the GIF. (optional)
     * @param height The height of the GIF. (optional)
     * @param frameTimes The times for each frame in the GIF. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiGifPostCall(List<File> files, String documentPassword, Boolean keepImagesAsIs, Integer resizeToImage, Boolean streched, Integer width, Integer height, String frameTimes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/gif";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (keepImagesAsIs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("keepImagesAsIs", keepImagesAsIs));
        if (resizeToImage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resizeToImage", resizeToImage));
        if (streched != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("streched", streched));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (frameTimes != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("frameTimes", frameTimes));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiGifPostValidateBeforeCall(List<File> files, String documentPassword, Boolean keepImagesAsIs, Integer resizeToImage, Boolean streched, Integer width, Integer height, String frameTimes, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiGifPostCall(files, documentPassword, keepImagesAsIs, resizeToImage, streched, width, height, frameTimes, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Make GIF.
     * Creates a GIF from a collection of images, ensuring smooth transitions and cohesive animation. Upload the images you want to include, and the service will generate a GIF based on your specifications. This service is ideal for animating a series of product shots, creating engaging social media content, or other animation needs.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param keepImagesAsIs Indicates whether the images should be kept as is. (optional)
     * @param resizeToImage The index of the image to resize the other images to. (optional)
     * @param streched  (optional)
     * @param width The width of the GIF. (optional)
     * @param height The height of the GIF. (optional)
     * @param frameTimes The times for each frame in the GIF. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiGifPost(List<File> files, String documentPassword, Boolean keepImagesAsIs, Integer resizeToImage, Boolean streched, Integer width, Integer height, String frameTimes) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiGifPostWithHttpInfo(files, documentPassword, keepImagesAsIs, resizeToImage, streched, width, height, frameTimes);
        return resp.getData();
    }

    /**
     * Make GIF.
     * Creates a GIF from a collection of images, ensuring smooth transitions and cohesive animation. Upload the images you want to include, and the service will generate a GIF based on your specifications. This service is ideal for animating a series of product shots, creating engaging social media content, or other animation needs.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param keepImagesAsIs Indicates whether the images should be kept as is. (optional)
     * @param resizeToImage The index of the image to resize the other images to. (optional)
     * @param streched  (optional)
     * @param width The width of the GIF. (optional)
     * @param height The height of the GIF. (optional)
     * @param frameTimes The times for each frame in the GIF. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiGifPostWithHttpInfo(List<File> files, String documentPassword, Boolean keepImagesAsIs, Integer resizeToImage, Boolean streched, Integer width, Integer height, String frameTimes) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiGifPostValidateBeforeCall(files, documentPassword, keepImagesAsIs, resizeToImage, streched, width, height, frameTimes, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Make GIF. (asynchronously)
     * Creates a GIF from a collection of images, ensuring smooth transitions and cohesive animation. Upload the images you want to include, and the service will generate a GIF based on your specifications. This service is ideal for animating a series of product shots, creating engaging social media content, or other animation needs.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param keepImagesAsIs Indicates whether the images should be kept as is. (optional)
     * @param resizeToImage The index of the image to resize the other images to. (optional)
     * @param streched  (optional)
     * @param width The width of the GIF. (optional)
     * @param height The height of the GIF. (optional)
     * @param frameTimes The times for each frame in the GIF. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiGifPostAsync(List<File> files, String documentPassword, Boolean keepImagesAsIs, Integer resizeToImage, Boolean streched, Integer width, Integer height, String frameTimes, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiGifPostValidateBeforeCall(files, documentPassword, keepImagesAsIs, resizeToImage, streched, width, height, frameTimes, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiHashPost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param alg The hashing algorithm to use. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiHashPostCall(List<File> files, String documentPassword, String inputType, String outputType, HashAlgorithm alg, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/hash";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));
        if (alg != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("alg", alg));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiHashPostValidateBeforeCall(List<File> files, String documentPassword, String inputType, String outputType, HashAlgorithm alg, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiHashPostCall(files, documentPassword, inputType, outputType, alg, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Calculate Document Hash.
     * Calculates the hash values for the provided documents using the specified hashing algorithm. Upload the documents and choose the desired algorithm, and the service will generate hash values for each file. This process helps verify that the documents have not been altered or corrupted, ensuring data integrity.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param alg The hashing algorithm to use. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiHashPost(List<File> files, String documentPassword, String inputType, String outputType, HashAlgorithm alg) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiHashPostWithHttpInfo(files, documentPassword, inputType, outputType, alg);
        return resp.getData();
    }

    /**
     * Calculate Document Hash.
     * Calculates the hash values for the provided documents using the specified hashing algorithm. Upload the documents and choose the desired algorithm, and the service will generate hash values for each file. This process helps verify that the documents have not been altered or corrupted, ensuring data integrity.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param alg The hashing algorithm to use. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiHashPostWithHttpInfo(List<File> files, String documentPassword, String inputType, String outputType, HashAlgorithm alg) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiHashPostValidateBeforeCall(files, documentPassword, inputType, outputType, alg, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Calculate Document Hash. (asynchronously)
     * Calculates the hash values for the provided documents using the specified hashing algorithm. Upload the documents and choose the desired algorithm, and the service will generate hash values for each file. This process helps verify that the documents have not been altered or corrupted, ensuring data integrity.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param alg The hashing algorithm to use. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiHashPostAsync(List<File> files, String documentPassword, String inputType, String outputType, HashAlgorithm alg, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiHashPostValidateBeforeCall(files, documentPassword, inputType, outputType, alg, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiLockPost
     * @param password  (optional)
     * @param files  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiLockPostCall(String password, List<File> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/lock";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (password != null)
        localVarFormParams.put("password", password);
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiLockPostValidateBeforeCall(String password, List<File> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiLockPostCall(password, files, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Lock document.
     * Locks the provided document with a specified password to restrict access to authorized users only. Upload the file and provide a password, and the service will apply the password protection to secure the document. Optionally, you can include additional files to further enhance the security of the document.
     * @param password  (optional)
     * @param files  (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiLockPost(String password, List<File> files) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiLockPostWithHttpInfo(password, files);
        return resp.getData();
    }

    /**
     * Lock document.
     * Locks the provided document with a specified password to restrict access to authorized users only. Upload the file and provide a password, and the service will apply the password protection to secure the document. Optionally, you can include additional files to further enhance the security of the document.
     * @param password  (optional)
     * @param files  (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiLockPostWithHttpInfo(String password, List<File> files) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiLockPostValidateBeforeCall(password, files, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lock document. (asynchronously)
     * Locks the provided document with a specified password to restrict access to authorized users only. Upload the file and provide a password, and the service will apply the password protection to secure the document. Optionally, you can include additional files to further enhance the security of the document.
     * @param password  (optional)
     * @param files  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiLockPostAsync(String password, List<File> files, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiLockPostValidateBeforeCall(password, files, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiMergePost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output file. (optional)
     * @param mergeType Type of merger operation. (optional)
     * @param horizontal The number of images to merge horizontally, if applicable. (optional)
     * @param vertical The number of images to merge vertically, if applicable. (optional)
     * @param pageSize The page size for the output file, if applicable. (optional)
     * @param dcIsLandscape Indicates whether the output file should be in landscape orientation. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiMergePostCall(List<File> files, String documentPassword, String inputType, String outputType, MergeImageType mergeType, Integer horizontal, Integer vertical, PageSize pageSize, Boolean dcIsLandscape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/merge";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));
        if (mergeType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("mergeType", mergeType));
        if (horizontal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("horizontal", horizontal));
        if (vertical != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vertical", vertical));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));
        if (dcIsLandscape != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("dc_isLandscape", dcIsLandscape));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiMergePostValidateBeforeCall(List<File> files, String documentPassword, String inputType, String outputType, MergeImageType mergeType, Integer horizontal, Integer vertical, PageSize pageSize, Boolean dcIsLandscape, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiMergePostCall(files, documentPassword, inputType, outputType, mergeType, horizontal, vertical, pageSize, dcIsLandscape, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Merge Documents.
     * Merges multiple documents or images into a single file based on specified preferences for orientation and page size. Upload the files you want to consolidate and define your formatting preferences. This service will combine the files into one, ensuring that the final document or image meets your requirements.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output file. (optional)
     * @param mergeType Type of merger operation. (optional)
     * @param horizontal The number of images to merge horizontally, if applicable. (optional)
     * @param vertical The number of images to merge vertically, if applicable. (optional)
     * @param pageSize The page size for the output file, if applicable. (optional)
     * @param dcIsLandscape Indicates whether the output file should be in landscape orientation. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiMergePost(List<File> files, String documentPassword, String inputType, String outputType, MergeImageType mergeType, Integer horizontal, Integer vertical, PageSize pageSize, Boolean dcIsLandscape) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiMergePostWithHttpInfo(files, documentPassword, inputType, outputType, mergeType, horizontal, vertical, pageSize, dcIsLandscape);
        return resp.getData();
    }

    /**
     * Merge Documents.
     * Merges multiple documents or images into a single file based on specified preferences for orientation and page size. Upload the files you want to consolidate and define your formatting preferences. This service will combine the files into one, ensuring that the final document or image meets your requirements.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output file. (optional)
     * @param mergeType Type of merger operation. (optional)
     * @param horizontal The number of images to merge horizontally, if applicable. (optional)
     * @param vertical The number of images to merge vertically, if applicable. (optional)
     * @param pageSize The page size for the output file, if applicable. (optional)
     * @param dcIsLandscape Indicates whether the output file should be in landscape orientation. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiMergePostWithHttpInfo(List<File> files, String documentPassword, String inputType, String outputType, MergeImageType mergeType, Integer horizontal, Integer vertical, PageSize pageSize, Boolean dcIsLandscape) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiMergePostValidateBeforeCall(files, documentPassword, inputType, outputType, mergeType, horizontal, vertical, pageSize, dcIsLandscape, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Merge Documents. (asynchronously)
     * Merges multiple documents or images into a single file based on specified preferences for orientation and page size. Upload the files you want to consolidate and define your formatting preferences. This service will combine the files into one, ensuring that the final document or image meets your requirements.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output file. (optional)
     * @param mergeType Type of merger operation. (optional)
     * @param horizontal The number of images to merge horizontally, if applicable. (optional)
     * @param vertical The number of images to merge vertically, if applicable. (optional)
     * @param pageSize The page size for the output file, if applicable. (optional)
     * @param dcIsLandscape Indicates whether the output file should be in landscape orientation. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiMergePostAsync(List<File> files, String documentPassword, String inputType, String outputType, MergeImageType mergeType, Integer horizontal, Integer vertical, PageSize pageSize, Boolean dcIsLandscape, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiMergePostValidateBeforeCall(files, documentPassword, inputType, outputType, mergeType, horizontal, vertical, pageSize, dcIsLandscape, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiMetadataPost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param operation The operation to perform on the metadata. (optional)
     * @param folder The folder where the files are located. (optional)
     * @param name The name of the file to perform the operation on. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiMetadataPostCall(List<File> files, String documentPassword, MetadataOperation operation, String folder, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/metadata";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (operation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("operation", operation));
        if (folder != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("folder", folder));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiMetadataPostValidateBeforeCall(List<File> files, String documentPassword, MetadataOperation operation, String folder, String name, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiMetadataPostCall(files, documentPassword, operation, folder, name, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Read and Change Document Metadata.
     * Reads and updates the metadata of the provided documents based on specified operations. Upload the documents and define the metadata changes you need. This service will read the existing metadata, apply the changes, and ensure that your files contain accurate and updated information.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param operation The operation to perform on the metadata. (optional)
     * @param folder The folder where the files are located. (optional)
     * @param name The name of the file to perform the operation on. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiMetadataPost(List<File> files, String documentPassword, MetadataOperation operation, String folder, String name) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiMetadataPostWithHttpInfo(files, documentPassword, operation, folder, name);
        return resp.getData();
    }

    /**
     * Read and Change Document Metadata.
     * Reads and updates the metadata of the provided documents based on specified operations. Upload the documents and define the metadata changes you need. This service will read the existing metadata, apply the changes, and ensure that your files contain accurate and updated information.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param operation The operation to perform on the metadata. (optional)
     * @param folder The folder where the files are located. (optional)
     * @param name The name of the file to perform the operation on. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiMetadataPostWithHttpInfo(List<File> files, String documentPassword, MetadataOperation operation, String folder, String name) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiMetadataPostValidateBeforeCall(files, documentPassword, operation, folder, name, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Read and Change Document Metadata. (asynchronously)
     * Reads and updates the metadata of the provided documents based on specified operations. Upload the documents and define the metadata changes you need. This service will read the existing metadata, apply the changes, and ensure that your files contain accurate and updated information.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param operation The operation to perform on the metadata. (optional)
     * @param folder The folder where the files are located. (optional)
     * @param name The name of the file to perform the operation on. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiMetadataPostAsync(List<File> files, String documentPassword, MetadataOperation operation, String folder, String name, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiMetadataPostValidateBeforeCall(files, documentPassword, operation, folder, name, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiOrganizePost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param remove The pages to remove from the document. (optional)
     * @param move The pages to move within the document. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiOrganizePostCall(List<File> files, String documentPassword, String inputType, String remove, String move, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/organize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (remove != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("remove", remove));
        if (move != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("move", move));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiOrganizePostValidateBeforeCall(List<File> files, String documentPassword, String inputType, String remove, String move, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiOrganizePostCall(files, documentPassword, inputType, remove, move, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Organize Document Pages.
     * Reorganizes the pages of the provided document based on your instructions. Upload the document and specify which pages to remove or move, and the service will rearrange the pages accordingly, ensuring that the document is organized as you require.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param remove The pages to remove from the document. (optional)
     * @param move The pages to move within the document. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiOrganizePost(List<File> files, String documentPassword, String inputType, String remove, String move) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiOrganizePostWithHttpInfo(files, documentPassword, inputType, remove, move);
        return resp.getData();
    }

    /**
     * Organize Document Pages.
     * Reorganizes the pages of the provided document based on your instructions. Upload the document and specify which pages to remove or move, and the service will rearrange the pages accordingly, ensuring that the document is organized as you require.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param remove The pages to remove from the document. (optional)
     * @param move The pages to move within the document. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiOrganizePostWithHttpInfo(List<File> files, String documentPassword, String inputType, String remove, String move) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiOrganizePostValidateBeforeCall(files, documentPassword, inputType, remove, move, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Organize Document Pages. (asynchronously)
     * Reorganizes the pages of the provided document based on your instructions. Upload the document and specify which pages to remove or move, and the service will rearrange the pages accordingly, ensuring that the document is organized as you require.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param remove The pages to remove from the document. (optional)
     * @param move The pages to move within the document. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiOrganizePostAsync(List<File> files, String documentPassword, String inputType, String remove, String move, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiOrganizePostValidateBeforeCall(files, documentPassword, inputType, remove, move, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiParsePost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiParsePostCall(List<File> files, String documentPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/parse";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiParsePostValidateBeforeCall(List<File> files, String documentPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiParsePostCall(files, documentPassword, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Parse Document.
     * Analyses and extracts relevant content from the provided document files. The parsing service organizes the data within your documents to make it accessible and tailored to your specific requirements.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiParsePost(List<File> files, String documentPassword) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiParsePostWithHttpInfo(files, documentPassword);
        return resp.getData();
    }

    /**
     * Parse Document.
     * Analyses and extracts relevant content from the provided document files. The parsing service organizes the data within your documents to make it accessible and tailored to your specific requirements.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiParsePostWithHttpInfo(List<File> files, String documentPassword) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiParsePostValidateBeforeCall(files, documentPassword, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Parse Document. (asynchronously)
     * Analyses and extracts relevant content from the provided document files. The parsing service organizes the data within your documents to make it accessible and tailored to your specific requirements.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiParsePostAsync(List<File> files, String documentPassword, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiParsePostValidateBeforeCall(files, documentPassword, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiRedactPost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param searchQuery The text to search for and redact. (optional)
     * @param replaceText The text to replace the found text with. (optional)
     * @param caseSensitive Indicates whether the search should be case-sensitive. (optional)
     * @param text Indicates whether text should be redacted. (optional)
     * @param comments Indicates whether comments should be redacted. (optional)
     * @param metadata Indicates whether metadata should be redacted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRedactPostCall(List<File> files, String documentPassword, String searchQuery, String replaceText, Boolean caseSensitive, Boolean text, Boolean comments, Boolean metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/redact";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (searchQuery != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("searchQuery", searchQuery));
        if (replaceText != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("replaceText", replaceText));
        if (caseSensitive != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("caseSensitive", caseSensitive));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));
        if (comments != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("comments", comments));
        if (metadata != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("metadata", metadata));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiRedactPostValidateBeforeCall(List<File> files, String documentPassword, String searchQuery, String replaceText, Boolean caseSensitive, Boolean text, Boolean comments, Boolean metadata, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiRedactPostCall(files, documentPassword, searchQuery, replaceText, caseSensitive, text, comments, metadata, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Redact Document Text.
     * Redacts sensitive information from the provided documents by removing specified text, comments, and metadata. You can specify the text to be redacted and use case-sensitive search to ensure thorough removal. This service helps maintain confidentiality and security by ensuring that sensitive information is completely removed.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param searchQuery The text to search for and redact. (optional)
     * @param replaceText The text to replace the found text with. (optional)
     * @param caseSensitive Indicates whether the search should be case-sensitive. (optional)
     * @param text Indicates whether text should be redacted. (optional)
     * @param comments Indicates whether comments should be redacted. (optional)
     * @param metadata Indicates whether metadata should be redacted. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiRedactPost(List<File> files, String documentPassword, String searchQuery, String replaceText, Boolean caseSensitive, Boolean text, Boolean comments, Boolean metadata) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiRedactPostWithHttpInfo(files, documentPassword, searchQuery, replaceText, caseSensitive, text, comments, metadata);
        return resp.getData();
    }

    /**
     * Redact Document Text.
     * Redacts sensitive information from the provided documents by removing specified text, comments, and metadata. You can specify the text to be redacted and use case-sensitive search to ensure thorough removal. This service helps maintain confidentiality and security by ensuring that sensitive information is completely removed.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param searchQuery The text to search for and redact. (optional)
     * @param replaceText The text to replace the found text with. (optional)
     * @param caseSensitive Indicates whether the search should be case-sensitive. (optional)
     * @param text Indicates whether text should be redacted. (optional)
     * @param comments Indicates whether comments should be redacted. (optional)
     * @param metadata Indicates whether metadata should be redacted. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiRedactPostWithHttpInfo(List<File> files, String documentPassword, String searchQuery, String replaceText, Boolean caseSensitive, Boolean text, Boolean comments, Boolean metadata) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiRedactPostValidateBeforeCall(files, documentPassword, searchQuery, replaceText, caseSensitive, text, comments, metadata, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Redact Document Text. (asynchronously)
     * Redacts sensitive information from the provided documents by removing specified text, comments, and metadata. You can specify the text to be redacted and use case-sensitive search to ensure thorough removal. This service helps maintain confidentiality and security by ensuring that sensitive information is completely removed.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param searchQuery The text to search for and redact. (optional)
     * @param replaceText The text to replace the found text with. (optional)
     * @param caseSensitive Indicates whether the search should be case-sensitive. (optional)
     * @param text Indicates whether text should be redacted. (optional)
     * @param comments Indicates whether comments should be redacted. (optional)
     * @param metadata Indicates whether metadata should be redacted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRedactPostAsync(List<File> files, String documentPassword, String searchQuery, String replaceText, Boolean caseSensitive, Boolean text, Boolean comments, Boolean metadata, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiRedactPostValidateBeforeCall(files, documentPassword, searchQuery, replaceText, caseSensitive, text, comments, metadata, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiRemoveIdPost
     * @param id The ID of the processing to remove. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRemoveIdPostCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/remove/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiRemoveIdPostValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling pdfWebapiRemoveIdPost(Async)");
        }
        
        com.squareup.okhttp.Call call = pdfWebapiRemoveIdPostCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove stored files.
     * Removes processed files from storage.
     * @param id The ID of the processing to remove. (required)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiRemoveIdPost(String id) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiRemoveIdPostWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Remove stored files.
     * Removes processed files from storage.
     * @param id The ID of the processing to remove. (required)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiRemoveIdPostWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiRemoveIdPostValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove stored files. (asynchronously)
     * Removes processed files from storage.
     * @param id The ID of the processing to remove. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRemoveIdPostAsync(String id, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiRemoveIdPostValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiRemovePost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRemovePostCall(List<File> files, String documentPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiRemovePostValidateBeforeCall(List<File> files, String documentPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiRemovePostCall(files, documentPassword, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove Document Annotations.
     * Removes all annotations, including comments, highlights, and markup, from the provided documents. By specifying the documents, this service ensures that they are cleaned of any annotations, resulting in a clean and annotation-free file.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiRemovePost(List<File> files, String documentPassword) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiRemovePostWithHttpInfo(files, documentPassword);
        return resp.getData();
    }

    /**
     * Remove Document Annotations.
     * Removes all annotations, including comments, highlights, and markup, from the provided documents. By specifying the documents, this service ensures that they are cleaned of any annotations, resulting in a clean and annotation-free file.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiRemovePostWithHttpInfo(List<File> files, String documentPassword) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiRemovePostValidateBeforeCall(files, documentPassword, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove Document Annotations. (asynchronously)
     * Removes all annotations, including comments, highlights, and markup, from the provided documents. By specifying the documents, this service ensures that they are cleaned of any annotations, resulting in a clean and annotation-free file.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRemovePostAsync(List<File> files, String documentPassword, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiRemovePostValidateBeforeCall(files, documentPassword, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiRemoveWatermarkPost
     * @param watermarkText  (optional)
     * @param top  (optional)
     * @param left  (optional)
     * @param bottom  (optional)
     * @param right  (optional)
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param isAllPages Indicates whether the watermark should be removed from all pages. (optional)
     * @param watermarkType The type of watermark to remove. (optional)
     * @param removeRange The range of pages to remove the watermark from. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRemoveWatermarkPostCall(String watermarkText, Integer top, Integer left, Integer bottom, Integer right, List<File> files, String documentPassword, Boolean isAllPages, WatermarkType watermarkType, String removeRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/remove-watermark";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (isAllPages != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isAllPages", isAllPages));
        if (watermarkType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("watermarkType", watermarkType));
        if (removeRange != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("removeRange", removeRange));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (watermarkText != null)
        localVarFormParams.put("watermarkText", watermarkText);
        if (top != null)
        localVarFormParams.put("top", top);
        if (left != null)
        localVarFormParams.put("left", left);
        if (bottom != null)
        localVarFormParams.put("bottom", bottom);
        if (right != null)
        localVarFormParams.put("right", right);
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiRemoveWatermarkPostValidateBeforeCall(String watermarkText, Integer top, Integer left, Integer bottom, Integer right, List<File> files, String documentPassword, Boolean isAllPages, WatermarkType watermarkType, String removeRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiRemoveWatermarkPostCall(watermarkText, top, left, bottom, right, files, documentPassword, isAllPages, watermarkType, removeRange, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove Document Watermark.
     * Removes an unwanted watermark from all pages of the provided document. Submit the document, and this service will efficiently eliminate the watermark, resulting in a clean version of the file without the watermark.
     * @param watermarkText  (optional)
     * @param top  (optional)
     * @param left  (optional)
     * @param bottom  (optional)
     * @param right  (optional)
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param isAllPages Indicates whether the watermark should be removed from all pages. (optional)
     * @param watermarkType The type of watermark to remove. (optional)
     * @param removeRange The range of pages to remove the watermark from. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiRemoveWatermarkPost(String watermarkText, Integer top, Integer left, Integer bottom, Integer right, List<File> files, String documentPassword, Boolean isAllPages, WatermarkType watermarkType, String removeRange) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiRemoveWatermarkPostWithHttpInfo(watermarkText, top, left, bottom, right, files, documentPassword, isAllPages, watermarkType, removeRange);
        return resp.getData();
    }

    /**
     * Remove Document Watermark.
     * Removes an unwanted watermark from all pages of the provided document. Submit the document, and this service will efficiently eliminate the watermark, resulting in a clean version of the file without the watermark.
     * @param watermarkText  (optional)
     * @param top  (optional)
     * @param left  (optional)
     * @param bottom  (optional)
     * @param right  (optional)
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param isAllPages Indicates whether the watermark should be removed from all pages. (optional)
     * @param watermarkType The type of watermark to remove. (optional)
     * @param removeRange The range of pages to remove the watermark from. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiRemoveWatermarkPostWithHttpInfo(String watermarkText, Integer top, Integer left, Integer bottom, Integer right, List<File> files, String documentPassword, Boolean isAllPages, WatermarkType watermarkType, String removeRange) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiRemoveWatermarkPostValidateBeforeCall(watermarkText, top, left, bottom, right, files, documentPassword, isAllPages, watermarkType, removeRange, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove Document Watermark. (asynchronously)
     * Removes an unwanted watermark from all pages of the provided document. Submit the document, and this service will efficiently eliminate the watermark, resulting in a clean version of the file without the watermark.
     * @param watermarkText  (optional)
     * @param top  (optional)
     * @param left  (optional)
     * @param bottom  (optional)
     * @param right  (optional)
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param isAllPages Indicates whether the watermark should be removed from all pages. (optional)
     * @param watermarkType The type of watermark to remove. (optional)
     * @param removeRange The range of pages to remove the watermark from. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRemoveWatermarkPostAsync(String watermarkText, Integer top, Integer left, Integer bottom, Integer right, List<File> files, String documentPassword, Boolean isAllPages, WatermarkType watermarkType, String removeRange, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiRemoveWatermarkPostValidateBeforeCall(watermarkText, top, left, bottom, right, files, documentPassword, isAllPages, watermarkType, removeRange, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiRemovepagesPost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param removeRange The range of pages to remove from the files. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRemovepagesPostCall(List<File> files, String documentPassword, String removeRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/removepages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (removeRange != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("removeRange", removeRange));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiRemovepagesPostValidateBeforeCall(List<File> files, String documentPassword, String removeRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiRemovepagesPostCall(files, documentPassword, removeRange, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Remove Pages from Document.
     * Removes specified pages from the provided document, leaving only the pages you want to keep. Simply provide the document and specify which pages to remove, and the service will process the file accordingly.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param removeRange The range of pages to remove from the files. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiRemovepagesPost(List<File> files, String documentPassword, String removeRange) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiRemovepagesPostWithHttpInfo(files, documentPassword, removeRange);
        return resp.getData();
    }

    /**
     * Remove Pages from Document.
     * Removes specified pages from the provided document, leaving only the pages you want to keep. Simply provide the document and specify which pages to remove, and the service will process the file accordingly.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param removeRange The range of pages to remove from the files. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiRemovepagesPostWithHttpInfo(List<File> files, String documentPassword, String removeRange) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiRemovepagesPostValidateBeforeCall(files, documentPassword, removeRange, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Remove Pages from Document. (asynchronously)
     * Removes specified pages from the provided document, leaving only the pages you want to keep. Simply provide the document and specify which pages to remove, and the service will process the file accordingly.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param removeRange The range of pages to remove from the files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRemovepagesPostAsync(List<File> files, String documentPassword, String removeRange, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiRemovepagesPostValidateBeforeCall(files, documentPassword, removeRange, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiRepairPost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRepairPostCall(List<File> files, String documentPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/repair";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiRepairPostValidateBeforeCall(List<File> files, String documentPassword, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiRepairPostCall(files, documentPassword, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Repair Document.
     * Repairs a corrupted or error-ridden document by identifying and fixing issues. Upload the problematic file, and this service will restore it to a usable state.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiRepairPost(List<File> files, String documentPassword) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiRepairPostWithHttpInfo(files, documentPassword);
        return resp.getData();
    }

    /**
     * Repair Document.
     * Repairs a corrupted or error-ridden document by identifying and fixing issues. Upload the problematic file, and this service will restore it to a usable state.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiRepairPostWithHttpInfo(List<File> files, String documentPassword) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiRepairPostValidateBeforeCall(files, documentPassword, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Repair Document. (asynchronously)
     * Repairs a corrupted or error-ridden document by identifying and fixing issues. Upload the problematic file, and this service will restore it to a usable state.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRepairPostAsync(List<File> files, String documentPassword, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiRepairPostValidateBeforeCall(files, documentPassword, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiResizePost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param resizeType The type of resizing to apply. (optional)
     * @param presetType The type of preset size to use for resizing. (optional)
     * @param presetSize The preset size to use for resizing. (optional)
     * @param width The desired width of the resized files. (optional)
     * @param height The desired height of the resized files. (optional)
     * @param percentage The percentage to resize the files by. (optional)
     * @param useProportions Indicates whether to maintain the aspect ratio when resizing. (optional)
     * @param pageSize The page size to use for the resized files. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiResizePostCall(List<File> files, String documentPassword, String inputType, String outputType, ResizeType resizeType, ResizePresetType presetType, ResizePresetSize presetSize, Integer width, Integer height, Integer percentage, Boolean useProportions, ResizePageSize pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/resize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));
        if (resizeType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("resizeType", resizeType));
        if (presetType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("presetType", presetType));
        if (presetSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("presetSize", presetSize));
        if (width != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("width", width));
        if (height != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("height", height));
        if (percentage != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("percentage", percentage));
        if (useProportions != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("useProportions", useProportions));
        if (pageSize != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageSize", pageSize));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiResizePostValidateBeforeCall(List<File> files, String documentPassword, String inputType, String outputType, ResizeType resizeType, ResizePresetType presetType, ResizePresetSize presetSize, Integer width, Integer height, Integer percentage, Boolean useProportions, ResizePageSize pageSize, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiResizePostCall(files, documentPassword, inputType, outputType, resizeType, presetType, presetSize, width, height, percentage, useProportions, pageSize, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Resize Document.
     * Resizes the document to fit the specified dimensions or preset sizes. Provide the file and specify the desired dimensions, or select from available preset sizes to adjust the document accordingly.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param resizeType The type of resizing to apply. (optional)
     * @param presetType The type of preset size to use for resizing. (optional)
     * @param presetSize The preset size to use for resizing. (optional)
     * @param width The desired width of the resized files. (optional)
     * @param height The desired height of the resized files. (optional)
     * @param percentage The percentage to resize the files by. (optional)
     * @param useProportions Indicates whether to maintain the aspect ratio when resizing. (optional)
     * @param pageSize The page size to use for the resized files. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiResizePost(List<File> files, String documentPassword, String inputType, String outputType, ResizeType resizeType, ResizePresetType presetType, ResizePresetSize presetSize, Integer width, Integer height, Integer percentage, Boolean useProportions, ResizePageSize pageSize) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiResizePostWithHttpInfo(files, documentPassword, inputType, outputType, resizeType, presetType, presetSize, width, height, percentage, useProportions, pageSize);
        return resp.getData();
    }

    /**
     * Resize Document.
     * Resizes the document to fit the specified dimensions or preset sizes. Provide the file and specify the desired dimensions, or select from available preset sizes to adjust the document accordingly.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param resizeType The type of resizing to apply. (optional)
     * @param presetType The type of preset size to use for resizing. (optional)
     * @param presetSize The preset size to use for resizing. (optional)
     * @param width The desired width of the resized files. (optional)
     * @param height The desired height of the resized files. (optional)
     * @param percentage The percentage to resize the files by. (optional)
     * @param useProportions Indicates whether to maintain the aspect ratio when resizing. (optional)
     * @param pageSize The page size to use for the resized files. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiResizePostWithHttpInfo(List<File> files, String documentPassword, String inputType, String outputType, ResizeType resizeType, ResizePresetType presetType, ResizePresetSize presetSize, Integer width, Integer height, Integer percentage, Boolean useProportions, ResizePageSize pageSize) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiResizePostValidateBeforeCall(files, documentPassword, inputType, outputType, resizeType, presetType, presetSize, width, height, percentage, useProportions, pageSize, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Resize Document. (asynchronously)
     * Resizes the document to fit the specified dimensions or preset sizes. Provide the file and specify the desired dimensions, or select from available preset sizes to adjust the document accordingly.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param resizeType The type of resizing to apply. (optional)
     * @param presetType The type of preset size to use for resizing. (optional)
     * @param presetSize The preset size to use for resizing. (optional)
     * @param width The desired width of the resized files. (optional)
     * @param height The desired height of the resized files. (optional)
     * @param percentage The percentage to resize the files by. (optional)
     * @param useProportions Indicates whether to maintain the aspect ratio when resizing. (optional)
     * @param pageSize The page size to use for the resized files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiResizePostAsync(List<File> files, String documentPassword, String inputType, String outputType, ResizeType resizeType, ResizePresetType presetType, ResizePresetSize presetSize, Integer width, Integer height, Integer percentage, Boolean useProportions, ResizePageSize pageSize, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiResizePostValidateBeforeCall(files, documentPassword, inputType, outputType, resizeType, presetType, presetSize, width, height, percentage, useProportions, pageSize, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiRotatePost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param angle The angle by which to rotate the files. (optional)
     * @param rotateType The type of rotation to perform. (optional)
     * @param pageNum The page number to rotate, if applicable. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRotatePostCall(List<File> files, String documentPassword, RotateAngle angle, RotateType rotateType, String pageNum, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/rotate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (angle != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("angle", angle));
        if (rotateType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rotateType", rotateType));
        if (pageNum != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageNum", pageNum));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiRotatePostValidateBeforeCall(List<File> files, String documentPassword, RotateAngle angle, RotateType rotateType, String pageNum, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiRotatePostCall(files, documentPassword, angle, rotateType, pageNum, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Rotate Document.
     * Rotates the document by a specified angle, allowing for adjustment of the document&#x27;s orientation. You can choose the type of rotation and target specific pages to ensure the document is aligned according to your needs.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param angle The angle by which to rotate the files. (optional)
     * @param rotateType The type of rotation to perform. (optional)
     * @param pageNum The page number to rotate, if applicable. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiRotatePost(List<File> files, String documentPassword, RotateAngle angle, RotateType rotateType, String pageNum) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiRotatePostWithHttpInfo(files, documentPassword, angle, rotateType, pageNum);
        return resp.getData();
    }

    /**
     * Rotate Document.
     * Rotates the document by a specified angle, allowing for adjustment of the document&#x27;s orientation. You can choose the type of rotation and target specific pages to ensure the document is aligned according to your needs.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param angle The angle by which to rotate the files. (optional)
     * @param rotateType The type of rotation to perform. (optional)
     * @param pageNum The page number to rotate, if applicable. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiRotatePostWithHttpInfo(List<File> files, String documentPassword, RotateAngle angle, RotateType rotateType, String pageNum) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiRotatePostValidateBeforeCall(files, documentPassword, angle, rotateType, pageNum, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Rotate Document. (asynchronously)
     * Rotates the document by a specified angle, allowing for adjustment of the document&#x27;s orientation. You can choose the type of rotation and target specific pages to ensure the document is aligned according to your needs.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param angle The angle by which to rotate the files. (optional)
     * @param rotateType The type of rotation to perform. (optional)
     * @param pageNum The page number to rotate, if applicable. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiRotatePostAsync(List<File> files, String documentPassword, RotateAngle angle, RotateType rotateType, String pageNum, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiRotatePostValidateBeforeCall(files, documentPassword, angle, rotateType, pageNum, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiSearchPost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param query The text to search for within the files. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSearchPostCall(List<File> files, String documentPassword, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (query != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("query", query));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiSearchPostValidateBeforeCall(List<File> files, String documentPassword, String query, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiSearchPostCall(files, documentPassword, query, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Search Document Text.
     * Searches the provided documents for the specified query and highlights the found text with a yellow background. This service helps you quickly locate and review relevant sections of your documents.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param query The text to search for within the files. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiSearchPost(List<File> files, String documentPassword, String query) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiSearchPostWithHttpInfo(files, documentPassword, query);
        return resp.getData();
    }

    /**
     * Search Document Text.
     * Searches the provided documents for the specified query and highlights the found text with a yellow background. This service helps you quickly locate and review relevant sections of your documents.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param query The text to search for within the files. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiSearchPostWithHttpInfo(List<File> files, String documentPassword, String query) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiSearchPostValidateBeforeCall(files, documentPassword, query, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Search Document Text. (asynchronously)
     * Searches the provided documents for the specified query and highlights the found text with a yellow background. This service helps you quickly locate and review relevant sections of your documents.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param query The text to search for within the files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSearchPostAsync(List<File> files, String documentPassword, String query, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiSearchPostValidateBeforeCall(files, documentPassword, query, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiSearchablePost
     * @param files  (optional)
     * @param lang The language of the files to be converted. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSearchablePostCall(List<File> files, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/searchable";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (lang != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("lang", lang));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiSearchablePostValidateBeforeCall(List<File> files, String lang, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiSearchablePostCall(files, lang, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Make Scanned PDF Searchable.
     * Converts scanned PDFs into a searchable PDF format by recognizing and indexing text. This service ensures that you can easily search through your documents by making the text searchable in the specified language.
     * @param files  (optional)
     * @param lang The language of the files to be converted. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiSearchablePost(List<File> files, String lang) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiSearchablePostWithHttpInfo(files, lang);
        return resp.getData();
    }

    /**
     * Make Scanned PDF Searchable.
     * Converts scanned PDFs into a searchable PDF format by recognizing and indexing text. This service ensures that you can easily search through your documents by making the text searchable in the specified language.
     * @param files  (optional)
     * @param lang The language of the files to be converted. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiSearchablePostWithHttpInfo(List<File> files, String lang) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiSearchablePostValidateBeforeCall(files, lang, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Make Scanned PDF Searchable. (asynchronously)
     * Converts scanned PDFs into a searchable PDF format by recognizing and indexing text. This service ensures that you can easily search through your documents by making the text searchable in the specified language.
     * @param files  (optional)
     * @param lang The language of the files to be converted. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSearchablePostAsync(List<File> files, String lang, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiSearchablePostValidateBeforeCall(files, lang, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiSignaturePost
     * @param image  (optional)
     * @param text  (optional)
     * @param textColor  (optional)
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param signatureType The type of signature to add. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSignaturePostCall(String image, String text, String textColor, List<File> files, String documentPassword, String inputType, String outputType, SignatureType signatureType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/signature";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));
        if (signatureType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("signatureType", signatureType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (image != null)
        localVarFormParams.put("image", image);
        if (text != null)
        localVarFormParams.put("text", text);
        if (textColor != null)
        localVarFormParams.put("textColor", textColor);
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiSignaturePostValidateBeforeCall(String image, String text, String textColor, List<File> files, String documentPassword, String inputType, String outputType, SignatureType signatureType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiSignaturePostCall(image, text, textColor, files, documentPassword, inputType, outputType, signatureType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Signature to Document.
     * Adds a signature to the provided documents, allowing for the insertion of both text and image signatures. This service ensures that your documents are properly signed and authenticated according to your specifications.
     * @param image  (optional)
     * @param text  (optional)
     * @param textColor  (optional)
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param signatureType The type of signature to add. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiSignaturePost(String image, String text, String textColor, List<File> files, String documentPassword, String inputType, String outputType, SignatureType signatureType) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiSignaturePostWithHttpInfo(image, text, textColor, files, documentPassword, inputType, outputType, signatureType);
        return resp.getData();
    }

    /**
     * Add Signature to Document.
     * Adds a signature to the provided documents, allowing for the insertion of both text and image signatures. This service ensures that your documents are properly signed and authenticated according to your specifications.
     * @param image  (optional)
     * @param text  (optional)
     * @param textColor  (optional)
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param signatureType The type of signature to add. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiSignaturePostWithHttpInfo(String image, String text, String textColor, List<File> files, String documentPassword, String inputType, String outputType, SignatureType signatureType) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiSignaturePostValidateBeforeCall(image, text, textColor, files, documentPassword, inputType, outputType, signatureType, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Signature to Document. (asynchronously)
     * Adds a signature to the provided documents, allowing for the insertion of both text and image signatures. This service ensures that your documents are properly signed and authenticated according to your specifications.
     * @param image  (optional)
     * @param text  (optional)
     * @param textColor  (optional)
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param signatureType The type of signature to add. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSignaturePostAsync(String image, String text, String textColor, List<File> files, String documentPassword, String inputType, String outputType, SignatureType signatureType, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiSignaturePostValidateBeforeCall(image, text, textColor, files, documentPassword, inputType, outputType, signatureType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiSplitdocPost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param splitType The type of splitting to be performed. (optional)
     * @param pairs Optional page rage for the splitting operation. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSplitdocPostCall(List<File> files, String documentPassword, String inputType, SplitDocType splitType, String pairs, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/splitdoc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (splitType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitType", splitType));
        if (pairs != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pairs", pairs));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiSplitdocPostValidateBeforeCall(List<File> files, String documentPassword, String inputType, SplitDocType splitType, String pairs, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiSplitdocPostCall(files, documentPassword, inputType, splitType, pairs, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Split Document.
     * Splits a document into smaller parts based on specified criteria, such as type or page range. This service ensures that each segment meets your exact requirements, simplifying document management and organization.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param splitType The type of splitting to be performed. (optional)
     * @param pairs Optional page rage for the splitting operation. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiSplitdocPost(List<File> files, String documentPassword, String inputType, SplitDocType splitType, String pairs) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiSplitdocPostWithHttpInfo(files, documentPassword, inputType, splitType, pairs);
        return resp.getData();
    }

    /**
     * Split Document.
     * Splits a document into smaller parts based on specified criteria, such as type or page range. This service ensures that each segment meets your exact requirements, simplifying document management and organization.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param splitType The type of splitting to be performed. (optional)
     * @param pairs Optional page rage for the splitting operation. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiSplitdocPostWithHttpInfo(List<File> files, String documentPassword, String inputType, SplitDocType splitType, String pairs) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiSplitdocPostValidateBeforeCall(files, documentPassword, inputType, splitType, pairs, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Split Document. (asynchronously)
     * Splits a document into smaller parts based on specified criteria, such as type or page range. This service ensures that each segment meets your exact requirements, simplifying document management and organization.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param splitType The type of splitting to be performed. (optional)
     * @param pairs Optional page rage for the splitting operation. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSplitdocPostAsync(List<File> files, String documentPassword, String inputType, SplitDocType splitType, String pairs, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiSplitdocPostValidateBeforeCall(files, documentPassword, inputType, splitType, pairs, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiSplitimagePost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param splitType The type of splitting to be performed. (optional)
     * @param vertical The number of vertical splits to create. (optional)
     * @param horizontal The number of horizontal splits to create. (optional)
     * @param outputType The desired output format for the split images. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSplitimagePostCall(List<File> files, String documentPassword, SplitImageType splitType, Integer vertical, Integer horizontal, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/splitimage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (splitType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("splitType", splitType));
        if (vertical != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("vertical", vertical));
        if (horizontal != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("horizontal", horizontal));
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiSplitimagePostValidateBeforeCall(List<File> files, String documentPassword, SplitImageType splitType, Integer vertical, Integer horizontal, String outputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiSplitimagePostCall(files, documentPassword, splitType, vertical, horizontal, outputType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Split Image.
     * Splits large images into smaller sections according to the specified parameters, making it easier to handle and process image data.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param splitType The type of splitting to be performed. (optional)
     * @param vertical The number of vertical splits to create. (optional)
     * @param horizontal The number of horizontal splits to create. (optional)
     * @param outputType The desired output format for the split images. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiSplitimagePost(List<File> files, String documentPassword, SplitImageType splitType, Integer vertical, Integer horizontal, String outputType) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiSplitimagePostWithHttpInfo(files, documentPassword, splitType, vertical, horizontal, outputType);
        return resp.getData();
    }

    /**
     * Split Image.
     * Splits large images into smaller sections according to the specified parameters, making it easier to handle and process image data.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param splitType The type of splitting to be performed. (optional)
     * @param vertical The number of vertical splits to create. (optional)
     * @param horizontal The number of horizontal splits to create. (optional)
     * @param outputType The desired output format for the split images. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiSplitimagePostWithHttpInfo(List<File> files, String documentPassword, SplitImageType splitType, Integer vertical, Integer horizontal, String outputType) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiSplitimagePostValidateBeforeCall(files, documentPassword, splitType, vertical, horizontal, outputType, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Split Image. (asynchronously)
     * Splits large images into smaller sections according to the specified parameters, making it easier to handle and process image data.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param splitType The type of splitting to be performed. (optional)
     * @param vertical The number of vertical splits to create. (optional)
     * @param horizontal The number of horizontal splits to create. (optional)
     * @param outputType The desired output format for the split images. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiSplitimagePostAsync(List<File> files, String documentPassword, SplitImageType splitType, Integer vertical, Integer horizontal, String outputType, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiSplitimagePostValidateBeforeCall(files, documentPassword, splitType, vertical, horizontal, outputType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiStatusIdPost
     * @param id The ID of the processing to check the status of. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiStatusIdPostCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/status/{id}"
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiStatusIdPostValidateBeforeCall(String id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling pdfWebapiStatusIdPost(Async)");
        }
        
        com.squareup.okhttp.Call call = pdfWebapiStatusIdPostCall(id, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Processing status.
     * Retrieves the status of a processing.
     * @param id The ID of the processing to check the status of. (required)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiStatusIdPost(String id) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiStatusIdPostWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Processing status.
     * Retrieves the status of a processing.
     * @param id The ID of the processing to check the status of. (required)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiStatusIdPostWithHttpInfo(String id) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiStatusIdPostValidateBeforeCall(id, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Processing status. (asynchronously)
     * Retrieves the status of a processing.
     * @param id The ID of the processing to check the status of. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiStatusIdPostAsync(String id, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiStatusIdPostValidateBeforeCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiUnlockPost
     * @param password  (optional)
     * @param files  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiUnlockPostCall(String password, List<File> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/unlock";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (password != null)
        localVarFormParams.put("password", password);
        if (files != null)
        localVarFormParams.put("files", files);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiUnlockPostValidateBeforeCall(String password, List<File> files, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiUnlockPostCall(password, files, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Unlock Document.
     * Attempts to unlock a password-protected document, using any associated files if necessary, to grant access to the content.
     * @param password  (optional)
     * @param files  (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiUnlockPost(String password, List<File> files) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiUnlockPostWithHttpInfo(password, files);
        return resp.getData();
    }

    /**
     * Unlock Document.
     * Attempts to unlock a password-protected document, using any associated files if necessary, to grant access to the content.
     * @param password  (optional)
     * @param files  (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiUnlockPostWithHttpInfo(String password, List<File> files) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiUnlockPostValidateBeforeCall(password, files, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Unlock Document. (asynchronously)
     * Attempts to unlock a password-protected document, using any associated files if necessary, to grant access to the content.
     * @param password  (optional)
     * @param files  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiUnlockPostAsync(String password, List<File> files, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiUnlockPostValidateBeforeCall(password, files, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiVerifyEsignPost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiVerifyEsignPostCall(List<File> files, String documentPassword, String inputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/verify_esign";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiVerifyEsignPostValidateBeforeCall(List<File> files, String documentPassword, String inputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiVerifyEsignPostCall(files, documentPassword, inputType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Verify Document Certificate.
     * Verifies the electronic signature of the provided document to ensure its authenticity and integrity. This service checks the digital certificates in the document to confirm their validity and trustworthiness.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiVerifyEsignPost(List<File> files, String documentPassword, String inputType) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiVerifyEsignPostWithHttpInfo(files, documentPassword, inputType);
        return resp.getData();
    }

    /**
     * Verify Document Certificate.
     * Verifies the electronic signature of the provided document to ensure its authenticity and integrity. This service checks the digital certificates in the document to confirm their validity and trustworthiness.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiVerifyEsignPostWithHttpInfo(List<File> files, String documentPassword, String inputType) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiVerifyEsignPostValidateBeforeCall(files, documentPassword, inputType, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Verify Document Certificate. (asynchronously)
     * Verifies the electronic signature of the provided document to ensure its authenticity and integrity. This service checks the digital certificates in the document to confirm their validity and trustworthiness.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiVerifyEsignPostAsync(List<File> files, String documentPassword, String inputType, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiVerifyEsignPostValidateBeforeCall(files, documentPassword, inputType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiWatermarkPost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param isColored Indicate is watermark will be in color or grayscale. (optional)
     * @param isText Indicates whether the watermark is text. (optional)
     * @param text The text of the watermark. (optional)
     * @param name The name of the font for the text watermark. (optional)
     * @param size The size of the font for the text watermark. (optional)
     * @param bold Indicates whether the text watermark is bold. (optional)
     * @param italic Indicates whether the text watermark is italic. (optional)
     * @param underlined Indicates whether the text watermark is underlined. (optional)
     * @param color The color of the text or image watermark. (optional)
     * @param isBackground Indicates whether the watermark is a background watermark. (optional)
     * @param rotation The rotation angle of the watermark. (optional)
     * @param transparency The transparency of the watermark. (optional)
     * @param layer Indicates whether the watermark is a layer. (optional)
     * @param pageFrom The starting page number for the watermark. (optional)
     * @param pageTo The ending page number for the watermark. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiWatermarkPostCall(List<File> files, String documentPassword, String inputType, String outputType, Boolean isColored, Boolean isText, String text, String name, Integer size, Boolean bold, Boolean italic, Boolean underlined, String color, Boolean isBackground, Integer rotation, Float transparency, Boolean layer, Integer pageFrom, Integer pageTo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/watermark";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));
        if (outputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("outputType", outputType));
        if (isColored != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isColored", isColored));
        if (isText != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isText", isText));
        if (text != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("text", text));
        if (name != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("name", name));
        if (size != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("size", size));
        if (bold != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("bold", bold));
        if (italic != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("italic", italic));
        if (underlined != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("underlined", underlined));
        if (color != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("color", color));
        if (isBackground != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("isBackground", isBackground));
        if (rotation != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("rotation", rotation));
        if (transparency != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("transparency", transparency));
        if (layer != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("layer", layer));
        if (pageFrom != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageFrom", pageFrom));
        if (pageTo != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageTo", pageTo));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiWatermarkPostValidateBeforeCall(List<File> files, String documentPassword, String inputType, String outputType, Boolean isColored, Boolean isText, String text, String name, Integer size, Boolean bold, Boolean italic, Boolean underlined, String color, Boolean isBackground, Integer rotation, Float transparency, Boolean layer, Integer pageFrom, Integer pageTo, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiWatermarkPostCall(files, documentPassword, inputType, outputType, isColored, isText, text, name, size, bold, italic, underlined, color, isBackground, rotation, transparency, layer, pageFrom, pageTo, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add Watermark to Document.
     * Adds a watermark to the provided documents, helping to protect and identify them. This service ensures that the watermark is applied according to your specifications, enhancing the security and ownership of your content.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param isColored Indicate is watermark will be in color or grayscale. (optional)
     * @param isText Indicates whether the watermark is text. (optional)
     * @param text The text of the watermark. (optional)
     * @param name The name of the font for the text watermark. (optional)
     * @param size The size of the font for the text watermark. (optional)
     * @param bold Indicates whether the text watermark is bold. (optional)
     * @param italic Indicates whether the text watermark is italic. (optional)
     * @param underlined Indicates whether the text watermark is underlined. (optional)
     * @param color The color of the text or image watermark. (optional)
     * @param isBackground Indicates whether the watermark is a background watermark. (optional)
     * @param rotation The rotation angle of the watermark. (optional)
     * @param transparency The transparency of the watermark. (optional)
     * @param layer Indicates whether the watermark is a layer. (optional)
     * @param pageFrom The starting page number for the watermark. (optional)
     * @param pageTo The ending page number for the watermark. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiWatermarkPost(List<File> files, String documentPassword, String inputType, String outputType, Boolean isColored, Boolean isText, String text, String name, Integer size, Boolean bold, Boolean italic, Boolean underlined, String color, Boolean isBackground, Integer rotation, Float transparency, Boolean layer, Integer pageFrom, Integer pageTo) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiWatermarkPostWithHttpInfo(files, documentPassword, inputType, outputType, isColored, isText, text, name, size, bold, italic, underlined, color, isBackground, rotation, transparency, layer, pageFrom, pageTo);
        return resp.getData();
    }

    /**
     * Add Watermark to Document.
     * Adds a watermark to the provided documents, helping to protect and identify them. This service ensures that the watermark is applied according to your specifications, enhancing the security and ownership of your content.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param isColored Indicate is watermark will be in color or grayscale. (optional)
     * @param isText Indicates whether the watermark is text. (optional)
     * @param text The text of the watermark. (optional)
     * @param name The name of the font for the text watermark. (optional)
     * @param size The size of the font for the text watermark. (optional)
     * @param bold Indicates whether the text watermark is bold. (optional)
     * @param italic Indicates whether the text watermark is italic. (optional)
     * @param underlined Indicates whether the text watermark is underlined. (optional)
     * @param color The color of the text or image watermark. (optional)
     * @param isBackground Indicates whether the watermark is a background watermark. (optional)
     * @param rotation The rotation angle of the watermark. (optional)
     * @param transparency The transparency of the watermark. (optional)
     * @param layer Indicates whether the watermark is a layer. (optional)
     * @param pageFrom The starting page number for the watermark. (optional)
     * @param pageTo The ending page number for the watermark. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiWatermarkPostWithHttpInfo(List<File> files, String documentPassword, String inputType, String outputType, Boolean isColored, Boolean isText, String text, String name, Integer size, Boolean bold, Boolean italic, Boolean underlined, String color, Boolean isBackground, Integer rotation, Float transparency, Boolean layer, Integer pageFrom, Integer pageTo) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiWatermarkPostValidateBeforeCall(files, documentPassword, inputType, outputType, isColored, isText, text, name, size, bold, italic, underlined, color, isBackground, rotation, transparency, layer, pageFrom, pageTo, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add Watermark to Document. (asynchronously)
     * Adds a watermark to the provided documents, helping to protect and identify them. This service ensures that the watermark is applied according to your specifications, enhancing the security and ownership of your content.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param isColored Indicate is watermark will be in color or grayscale. (optional)
     * @param isText Indicates whether the watermark is text. (optional)
     * @param text The text of the watermark. (optional)
     * @param name The name of the font for the text watermark. (optional)
     * @param size The size of the font for the text watermark. (optional)
     * @param bold Indicates whether the text watermark is bold. (optional)
     * @param italic Indicates whether the text watermark is italic. (optional)
     * @param underlined Indicates whether the text watermark is underlined. (optional)
     * @param color The color of the text or image watermark. (optional)
     * @param isBackground Indicates whether the watermark is a background watermark. (optional)
     * @param rotation The rotation angle of the watermark. (optional)
     * @param transparency The transparency of the watermark. (optional)
     * @param layer Indicates whether the watermark is a layer. (optional)
     * @param pageFrom The starting page number for the watermark. (optional)
     * @param pageTo The ending page number for the watermark. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiWatermarkPostAsync(List<File> files, String documentPassword, String inputType, String outputType, Boolean isColored, Boolean isText, String text, String name, Integer size, Boolean bold, Boolean italic, Boolean underlined, String color, Boolean isBackground, Integer rotation, Float transparency, Boolean layer, Integer pageFrom, Integer pageTo, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiWatermarkPostValidateBeforeCall(files, documentPassword, inputType, outputType, isColored, isText, text, name, size, bold, italic, underlined, color, isBackground, rotation, transparency, layer, pageFrom, pageTo, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiWordcounterPost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param pageRange The range of pages to count words in. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiWordcounterPostCall(List<File> files, String documentPassword, String pageRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/wordcounter";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageRange != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("pageRange", pageRange));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiWordcounterPostValidateBeforeCall(List<File> files, String documentPassword, String pageRange, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiWordcounterPostCall(files, documentPassword, pageRange, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Count Words and Characters in Document.
     * Counts the words and characters in the provided documents within the specified page range. This service helps you accurately determine the length and content density of your documents, ensuring compliance with any required specifications or limits.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param pageRange The range of pages to count words in. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiWordcounterPost(List<File> files, String documentPassword, String pageRange) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiWordcounterPostWithHttpInfo(files, documentPassword, pageRange);
        return resp.getData();
    }

    /**
     * Count Words and Characters in Document.
     * Counts the words and characters in the provided documents within the specified page range. This service helps you accurately determine the length and content density of your documents, ensuring compliance with any required specifications or limits.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param pageRange The range of pages to count words in. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiWordcounterPostWithHttpInfo(List<File> files, String documentPassword, String pageRange) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiWordcounterPostValidateBeforeCall(files, documentPassword, pageRange, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Count Words and Characters in Document. (asynchronously)
     * Counts the words and characters in the provided documents within the specified page range. This service helps you accurately determine the length and content density of your documents, ensuring compliance with any required specifications or limits.
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param pageRange The range of pages to count words in. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiWordcounterPostAsync(List<File> files, String documentPassword, String pageRange, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiWordcounterPostValidateBeforeCall(files, documentPassword, pageRange, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for pdfWebapiXfaconvertPost
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiXfaconvertPostCall(List<File> files, String documentPassword, String inputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/pdf/webapi/xfaconvert";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (inputType != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("inputType", inputType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (files != null)
        localVarFormParams.put("files", files);
        if (documentPassword != null)
        localVarFormParams.put("documentPassword", documentPassword);

        final String[] localVarAccepts = {
            "text/plain", "application/json", "text/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call pdfWebapiXfaconvertPostValidateBeforeCall(List<File> files, String documentPassword, String inputType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        com.squareup.okhttp.Call call = pdfWebapiXfaconvertPostCall(files, documentPassword, inputType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Convert XFA Format to Another Format.
     * Converts XFA documents to the specified format, ensuring seamless compatibility and usability. This service supports a wide range of target formats, allowing users to choose the most suitable format for their specific needs. The conversion process maintains the integrity of the original document while adapting it to the desired format, making it ideal for editing, sharing, or archiving..
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @return FileResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileResponse pdfWebapiXfaconvertPost(List<File> files, String documentPassword, String inputType) throws ApiException {
        ApiResponse<FileResponse> resp = pdfWebapiXfaconvertPostWithHttpInfo(files, documentPassword, inputType);
        return resp.getData();
    }

    /**
     * Convert XFA Format to Another Format.
     * Converts XFA documents to the specified format, ensuring seamless compatibility and usability. This service supports a wide range of target formats, allowing users to choose the most suitable format for their specific needs. The conversion process maintains the integrity of the original document while adapting it to the desired format, making it ideal for editing, sharing, or archiving..
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @return ApiResponse&lt;FileResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileResponse> pdfWebapiXfaconvertPostWithHttpInfo(List<File> files, String documentPassword, String inputType) throws ApiException {
        com.squareup.okhttp.Call call = pdfWebapiXfaconvertPostValidateBeforeCall(files, documentPassword, inputType, null, null);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Convert XFA Format to Another Format. (asynchronously)
     * Converts XFA documents to the specified format, ensuring seamless compatibility and usability. This service supports a wide range of target formats, allowing users to choose the most suitable format for their specific needs. The conversion process maintains the integrity of the original document while adapting it to the desired format, making it ideal for editing, sharing, or archiving..
     * @param files  (optional)
     * @param documentPassword  (optional)
     * @param inputType The format of the input files. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call pdfWebapiXfaconvertPostAsync(List<File> files, String documentPassword, String inputType, final ApiCallback<FileResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = pdfWebapiXfaconvertPostValidateBeforeCall(files, documentPassword, inputType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
