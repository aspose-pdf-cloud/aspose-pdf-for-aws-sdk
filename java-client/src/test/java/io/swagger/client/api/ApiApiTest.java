/*
 * Aspose.PDF for AWS
 * Aspose.Pdf for AWS provides a comprehensive set of endpoints for various PDF-related tasks, enabling efficient document processing and manipulation. Users can retrieve processing status, download files, manage file locks, parse documents, redact sensitive information, convert between formats, merge files, add watermarks, perform text searches, and much more. With endpoints for tasks like electronic signing, document comparison, and form filling, the API offers extensive functionality to cater to diverse PDF requirements.
 *
 * OpenAPI spec version: v1
 * Contact: sales@aspose.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.CompressType;
import java.io.File;
import io.swagger.client.model.FileResponse;
import io.swagger.client.model.HashAlgorithm;
import io.swagger.client.model.MergeImageType;
import io.swagger.client.model.MetadataOperation;
import io.swagger.client.model.PageNumberHorizontalAlign;
import io.swagger.client.model.PageNumberVerticalAlign;
import io.swagger.client.model.PageSize;
import io.swagger.client.model.ResizePageSize;
import io.swagger.client.model.ResizePresetSize;
import io.swagger.client.model.ResizePresetType;
import io.swagger.client.model.ResizeType;
import io.swagger.client.model.RotateAngle;
import io.swagger.client.model.RotateType;
import io.swagger.client.model.SignatureType;
import io.swagger.client.model.SplitDocType;
import io.swagger.client.model.SplitImageType;
import io.swagger.client.model.WatermarkType;
import io.swagger.client.model.XmlType;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for ApiApi
 */
@Ignore
public class ApiApiTest {

    private final ApiApi api = new ApiApi();

    /**
     * Add Page Numbers to Document.
     *
     * Adds page numbers to your documents based on specified alignment, starting number, and format. The service ensures that page numbers are accurately applied, improving the readability and professionalism of your documents. It supports various formats, including DOC, PPTX, TIFF, DOCX, and PDF, to cater to your specific requirements.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiAddnumberPostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        PageNumberVerticalAlign vAlignment = null;
        PageNumberHorizontalAlign hAlignment = null;
        Integer startingNumber = null;
        Integer sNumber = null;
        Integer fNumber = null;
        Integer margin = null;
        Integer fontSize = null;
        String format = null;
        FileResponse response = api.pdfWebapiAddnumberPost(files, documentPassword, vAlignment, hAlignment, startingNumber, sNumber, fNumber, margin, fontSize, format);

        // TODO: test validations
    }
    /**
     * Change Fonts in Provided Files.
     *
     * Updates the fonts in your documents according to specified replacements.  Provide the font replacement details as a JSON string and upload your files using multipart/form-data.The service processes these requests asynchronously using Kafka, ensuring efficient handling of your files.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiChangeFontsPostTest() throws Exception {
        String fontReplacementsJson = null;
        List<File> files = null;
        String documentPassword = null;
        FileResponse response = api.pdfWebapiChangeFontsPost(fontReplacementsJson, files, documentPassword);

        // TODO: test validations
    }
    /**
     * Compare documents text.
     *
     * Compares the text of the provided documents and highlights the differences. Upload the files you want to compare, and the service will analyze them to detect any changes in the text. The result is a new document that clearly marks all text variations, making it easy to review and understand the modifications between the original and updated versions.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiComparisonPostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        FileResponse response = api.pdfWebapiComparisonPost(files, documentPassword);

        // TODO: test validations
    }
    /**
     * Compress Document.
     *
     * Compresses the provided documents to reduce their file size based on the specified compression level. Upload the documents and choose the desired compression level. The service will reduce the file sizes while maintaining quality, resulting in compressed files that are easier to handle and share, saving storage space and reducing upload and download times.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiCompressPostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        CompressType compressType = null;
        FileResponse response = api.pdfWebapiCompressPost(files, documentPassword, compressType);

        // TODO: test validations
    }
    /**
     * Convert Document to Another Format.
     *
     * Converts documents from one format to another seamlessly. Upload the files you need to convert and specify the target format. The service will handle the conversion process efficiently, ensuring that the resulting document is ready for use in the desired format and compatible with various applications and systems.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiConvertPostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        String inputType = null;
        String outputType = null;
        XmlType xmlType = null;
        String xmlTag = null;
        Integer fontSise = null;
        Boolean isToSingle = null;
        String separator = null;
        FileResponse response = api.pdfWebapiConvertPost(files, documentPassword, inputType, outputType, xmlType, xmlTag, fontSise, isToSingle, separator);

        // TODO: test validations
    }
    /**
     * Convert Web Page to Document.
     *
     * Converts a web page to a document in the specified output format. Provide the URL of the web page and choose the desired format for conversion. The service will create a document that mirrors the content and layout of the original web page, ensuring it is well-formatted and suitable for your needs.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiConvertWebpagePostTest() throws Exception {
        String webPage = null;
        String documentPassword = null;
        String outputType = null;
        FileResponse response = api.pdfWebapiConvertWebpagePost(webPage, documentPassword, outputType);

        // TODO: test validations
    }
    /**
     * Crop Document.
     *
     * Crops the provided document to the specified dimensions by removing unwanted areas. Upload the document and specify the dimensions for cropping. The service will adjust the file accordingly, resulting in a precisely cropped document that meets your requirements.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiCropPostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        String inputType = null;
        Integer top = null;
        Integer right = null;
        Integer bottom = null;
        Integer left = null;
        String outputType = null;
        FileResponse response = api.pdfWebapiCropPost(files, documentPassword, inputType, top, right, bottom, left, outputType);

        // TODO: test validations
    }
    /**
     * File download.
     *
     * Downloads processed file.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiDownloadIdGetTest() throws Exception {
        String id = null;
        String file = null;
        api.pdfWebapiDownloadIdGet(id, file);

        // TODO: test validations
    }
    /**
     * Sign Document with Certificate.
     *
     * Applies a digital signature to the provided document using the specified certificate. Upload the document and provide the certificate details, and the service will securely apply the signature, ensuring that the document is authenticated and legally binding.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiEsignPostTest() throws Exception {
        String passw = null;
        String initials = null;
        String invite = null;
        List<File> files = null;
        String documentPassword = null;
        String inputType = null;
        FileResponse response = api.pdfWebapiEsignPost(passw, initials, invite, files, documentPassword, inputType);

        // TODO: test validations
    }
    /**
     * Extract Tables from Document.
     *
     * Extracts tables from the provided document and converts them into the specified output format. Upload the document containing the tables and choose the format you prefer. The service will extract the tables and deliver them in the selected format, facilitating easier data usage and analysis.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiExtractPostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        String inputType = null;
        String outputType = null;
        FileResponse response = api.pdfWebapiExtractPost(files, documentPassword, inputType, outputType);

        // TODO: test validations
    }
    /**
     * Make GIF.
     *
     * Creates a GIF from a collection of images, ensuring smooth transitions and cohesive animation. Upload the images you want to include, and the service will generate a GIF based on your specifications. This service is ideal for animating a series of product shots, creating engaging social media content, or other animation needs.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiGifPostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        Boolean keepImagesAsIs = null;
        Integer resizeToImage = null;
        Boolean streched = null;
        Integer width = null;
        Integer height = null;
        String frameTimes = null;
        FileResponse response = api.pdfWebapiGifPost(files, documentPassword, keepImagesAsIs, resizeToImage, streched, width, height, frameTimes);

        // TODO: test validations
    }
    /**
     * Calculate Document Hash.
     *
     * Calculates the hash values for the provided documents using the specified hashing algorithm. Upload the documents and choose the desired algorithm, and the service will generate hash values for each file. This process helps verify that the documents have not been altered or corrupted, ensuring data integrity.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiHashPostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        String inputType = null;
        String outputType = null;
        HashAlgorithm alg = null;
        FileResponse response = api.pdfWebapiHashPost(files, documentPassword, inputType, outputType, alg);

        // TODO: test validations
    }
    /**
     * Lock document.
     *
     * Locks the provided document with a specified password to restrict access to authorized users only. Upload the file and provide a password, and the service will apply the password protection to secure the document. Optionally, you can include additional files to further enhance the security of the document.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiLockPostTest() throws Exception {
        String password = null;
        List<File> files = null;
        FileResponse response = api.pdfWebapiLockPost(password, files);

        // TODO: test validations
    }
    /**
     * Merge Documents.
     *
     * Merges multiple documents or images into a single file based on specified preferences for orientation and page size. Upload the files you want to consolidate and define your formatting preferences. This service will combine the files into one, ensuring that the final document or image meets your requirements.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiMergePostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        String inputType = null;
        String outputType = null;
        MergeImageType mergeType = null;
        Integer horizontal = null;
        Integer vertical = null;
        PageSize pageSize = null;
        Boolean dcIsLandscape = null;
        FileResponse response = api.pdfWebapiMergePost(files, documentPassword, inputType, outputType, mergeType, horizontal, vertical, pageSize, dcIsLandscape);

        // TODO: test validations
    }
    /**
     * Read and Change Document Metadata.
     *
     * Reads and updates the metadata of the provided documents based on specified operations. Upload the documents and define the metadata changes you need. This service will read the existing metadata, apply the changes, and ensure that your files contain accurate and updated information.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiMetadataPostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        MetadataOperation operation = null;
        String folder = null;
        String name = null;
        FileResponse response = api.pdfWebapiMetadataPost(files, documentPassword, operation, folder, name);

        // TODO: test validations
    }
    /**
     * Organize Document Pages.
     *
     * Reorganizes the pages of the provided document based on your instructions. Upload the document and specify which pages to remove or move, and the service will rearrange the pages accordingly, ensuring that the document is organized as you require.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiOrganizePostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        String inputType = null;
        String remove = null;
        String move = null;
        FileResponse response = api.pdfWebapiOrganizePost(files, documentPassword, inputType, remove, move);

        // TODO: test validations
    }
    /**
     * Parse Document.
     *
     * Analyses and extracts relevant content from the provided document files. The parsing service organizes the data within your documents to make it accessible and tailored to your specific requirements.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiParsePostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        FileResponse response = api.pdfWebapiParsePost(files, documentPassword);

        // TODO: test validations
    }
    /**
     * Redact Document Text.
     *
     * Redacts sensitive information from the provided documents by removing specified text, comments, and metadata. You can specify the text to be redacted and use case-sensitive search to ensure thorough removal. This service helps maintain confidentiality and security by ensuring that sensitive information is completely removed.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRedactPostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        String searchQuery = null;
        String replaceText = null;
        Boolean caseSensitive = null;
        Boolean text = null;
        Boolean comments = null;
        Boolean metadata = null;
        FileResponse response = api.pdfWebapiRedactPost(files, documentPassword, searchQuery, replaceText, caseSensitive, text, comments, metadata);

        // TODO: test validations
    }
    /**
     * Remove stored files.
     *
     * Removes processed files from storage.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRemoveIdPostTest() throws Exception {
        String id = null;
        FileResponse response = api.pdfWebapiRemoveIdPost(id);

        // TODO: test validations
    }
    /**
     * Remove Document Annotations.
     *
     * Removes all annotations, including comments, highlights, and markup, from the provided documents. By specifying the documents, this service ensures that they are cleaned of any annotations, resulting in a clean and annotation-free file.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRemovePostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        FileResponse response = api.pdfWebapiRemovePost(files, documentPassword);

        // TODO: test validations
    }
    /**
     * Remove Document Watermark.
     *
     * Removes an unwanted watermark from all pages of the provided document. Submit the document, and this service will efficiently eliminate the watermark, resulting in a clean version of the file without the watermark.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRemoveWatermarkPostTest() throws Exception {
        String watermarkText = null;
        Integer top = null;
        Integer left = null;
        Integer bottom = null;
        Integer right = null;
        List<File> files = null;
        String documentPassword = null;
        Boolean isAllPages = null;
        WatermarkType watermarkType = null;
        String removeRange = null;
        FileResponse response = api.pdfWebapiRemoveWatermarkPost(watermarkText, top, left, bottom, right, files, documentPassword, isAllPages, watermarkType, removeRange);

        // TODO: test validations
    }
    /**
     * Remove Pages from Document.
     *
     * Removes specified pages from the provided document, leaving only the pages you want to keep. Simply provide the document and specify which pages to remove, and the service will process the file accordingly.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRemovepagesPostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        String removeRange = null;
        FileResponse response = api.pdfWebapiRemovepagesPost(files, documentPassword, removeRange);

        // TODO: test validations
    }
    /**
     * Repair Document.
     *
     * Repairs a corrupted or error-ridden document by identifying and fixing issues. Upload the problematic file, and this service will restore it to a usable state.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRepairPostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        FileResponse response = api.pdfWebapiRepairPost(files, documentPassword);

        // TODO: test validations
    }
    /**
     * Resize Document.
     *
     * Resizes the document to fit the specified dimensions or preset sizes. Provide the file and specify the desired dimensions, or select from available preset sizes to adjust the document accordingly.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiResizePostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        String inputType = null;
        String outputType = null;
        ResizeType resizeType = null;
        ResizePresetType presetType = null;
        ResizePresetSize presetSize = null;
        Integer width = null;
        Integer height = null;
        Integer percentage = null;
        Boolean useProportions = null;
        ResizePageSize pageSize = null;
        FileResponse response = api.pdfWebapiResizePost(files, documentPassword, inputType, outputType, resizeType, presetType, presetSize, width, height, percentage, useProportions, pageSize);

        // TODO: test validations
    }
    /**
     * Rotate Document.
     *
     * Rotates the document by a specified angle, allowing for adjustment of the document&#x27;s orientation. You can choose the type of rotation and target specific pages to ensure the document is aligned according to your needs.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiRotatePostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        RotateAngle angle = null;
        RotateType rotateType = null;
        String pageNum = null;
        FileResponse response = api.pdfWebapiRotatePost(files, documentPassword, angle, rotateType, pageNum);

        // TODO: test validations
    }
    /**
     * Search Document Text.
     *
     * Searches the provided documents for the specified query and highlights the found text with a yellow background. This service helps you quickly locate and review relevant sections of your documents.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiSearchPostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        String query = null;
        FileResponse response = api.pdfWebapiSearchPost(files, documentPassword, query);

        // TODO: test validations
    }
    /**
     * Make Scanned PDF Searchable.
     *
     * Converts scanned PDFs into a searchable PDF format by recognizing and indexing text. This service ensures that you can easily search through your documents by making the text searchable in the specified language.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiSearchablePostTest() throws Exception {
        List<File> files = null;
        String lang = null;
        FileResponse response = api.pdfWebapiSearchablePost(files, lang);

        // TODO: test validations
    }
    /**
     * Add Signature to Document.
     *
     * Adds a signature to the provided documents, allowing for the insertion of both text and image signatures. This service ensures that your documents are properly signed and authenticated according to your specifications.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiSignaturePostTest() throws Exception {
        String image = null;
        String text = null;
        String textColor = null;
        List<File> files = null;
        String documentPassword = null;
        String inputType = null;
        String outputType = null;
        SignatureType signatureType = null;
        FileResponse response = api.pdfWebapiSignaturePost(image, text, textColor, files, documentPassword, inputType, outputType, signatureType);

        // TODO: test validations
    }
    /**
     * Split Document.
     *
     * Splits a document into smaller parts based on specified criteria, such as type or page range. This service ensures that each segment meets your exact requirements, simplifying document management and organization.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiSplitdocPostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        String inputType = null;
        SplitDocType splitType = null;
        String pairs = null;
        FileResponse response = api.pdfWebapiSplitdocPost(files, documentPassword, inputType, splitType, pairs);

        // TODO: test validations
    }
    /**
     * Split Image.
     *
     * Splits large images into smaller sections according to the specified parameters, making it easier to handle and process image data.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiSplitimagePostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        SplitImageType splitType = null;
        Integer vertical = null;
        Integer horizontal = null;
        String outputType = null;
        FileResponse response = api.pdfWebapiSplitimagePost(files, documentPassword, splitType, vertical, horizontal, outputType);

        // TODO: test validations
    }
    /**
     * Processing status.
     *
     * Retrieves the status of a processing.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiStatusIdPostTest() throws Exception {
        String id = null;
        FileResponse response = api.pdfWebapiStatusIdPost(id);

        // TODO: test validations
    }
    /**
     * Unlock Document.
     *
     * Attempts to unlock a password-protected document, using any associated files if necessary, to grant access to the content.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiUnlockPostTest() throws Exception {
        String password = null;
        List<File> files = null;
        FileResponse response = api.pdfWebapiUnlockPost(password, files);

        // TODO: test validations
    }
    /**
     * Verify Document Certificate.
     *
     * Verifies the electronic signature of the provided document to ensure its authenticity and integrity. This service checks the digital certificates in the document to confirm their validity and trustworthiness.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiVerifyEsignPostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        String inputType = null;
        FileResponse response = api.pdfWebapiVerifyEsignPost(files, documentPassword, inputType);

        // TODO: test validations
    }
    /**
     * Add Watermark to Document.
     *
     * Adds a watermark to the provided documents, helping to protect and identify them. This service ensures that the watermark is applied according to your specifications, enhancing the security and ownership of your content.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiWatermarkPostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        String inputType = null;
        String outputType = null;
        Boolean isColored = null;
        Boolean isText = null;
        String text = null;
        String name = null;
        Integer size = null;
        Boolean bold = null;
        Boolean italic = null;
        Boolean underlined = null;
        String color = null;
        Boolean isBackground = null;
        Integer rotation = null;
        Float transparency = null;
        Boolean layer = null;
        Integer pageFrom = null;
        Integer pageTo = null;
        FileResponse response = api.pdfWebapiWatermarkPost(files, documentPassword, inputType, outputType, isColored, isText, text, name, size, bold, italic, underlined, color, isBackground, rotation, transparency, layer, pageFrom, pageTo);

        // TODO: test validations
    }
    /**
     * Count Words and Characters in Document.
     *
     * Counts the words and characters in the provided documents within the specified page range. This service helps you accurately determine the length and content density of your documents, ensuring compliance with any required specifications or limits.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiWordcounterPostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        String pageRange = null;
        FileResponse response = api.pdfWebapiWordcounterPost(files, documentPassword, pageRange);

        // TODO: test validations
    }
    /**
     * Convert XFA Format to Another Format.
     *
     * Converts XFA documents to the specified format, ensuring seamless compatibility and usability. This service supports a wide range of target formats, allowing users to choose the most suitable format for their specific needs. The conversion process maintains the integrity of the original document while adapting it to the desired format, making it ideal for editing, sharing, or archiving..
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void pdfWebapiXfaconvertPostTest() throws Exception {
        List<File> files = null;
        String documentPassword = null;
        String inputType = null;
        FileResponse response = api.pdfWebapiXfaconvertPost(files, documentPassword, inputType);

        // TODO: test validations
    }
}
