/**
 * Aspose.Pdf RestApi
 * Aspose.Pdf RestApi provides a comprehensive set of endpoints for various PDF-related tasks, enabling efficient document processing and manipulation. Users can retrieve processing status, download files, manage file locks, parse documents, redact sensitive information, convert between formats, merge files, add watermarks, perform text searches, and much more. With endpoints for tasks like electronic signing, document comparison, and form filling, the API offers extensive functionality to cater to diverse PDF requirements.
 *
 * OpenAPI spec version: v1
 * Contact: Evgeny.Pirogov@aspose.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.apis

import io.swagger.client.models.CompressType
import io.swagger.client.models.FileResponse
import io.swagger.client.models.HashAlgorithm
import io.swagger.client.models.MergeImageType
import io.swagger.client.models.MetadataOperation
import io.swagger.client.models.PageNumberHorizontalAlign
import io.swagger.client.models.PageNumberVerticalAlign
import io.swagger.client.models.PageSize
import io.swagger.client.models.ResizePageSize
import io.swagger.client.models.ResizePresetSize
import io.swagger.client.models.ResizePresetType
import io.swagger.client.models.ResizeType
import io.swagger.client.models.RotateAngle
import io.swagger.client.models.RotateType
import io.swagger.client.models.SignatureType
import io.swagger.client.models.SplitDocType
import io.swagger.client.models.SplitImageType
import io.swagger.client.models.WatermarkType
import io.swagger.client.models.XmlType

import io.swagger.client.infrastructure.*

class ApiApi(basePath: kotlin.String = "/") : ApiClient(basePath) {

    /**
     * Add page numbers to document.
     * Adds page numbers to the provided documents with the specified alignment, starting number, and format.
     * @param files  (optional)
     * @param vAlignment The vertical alignment of the page numbers. (optional)
     * @param hAlignment The horizontal alignment of the page numbers. (optional)
     * @param startingNumber The starting number for the page numbers. (optional)
     * @param sNumber The number of the first page to start numbering from. (optional)
     * @param fNumber The number of the last page to end numbering at. (optional)
     * @param margin The margin around the page numbers. (optional)
     * @param fontSize The font size of the page numbers. (optional)
     * @param format The format of the page numbers. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiAddnumberPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, vAlignment: PageNumberVerticalAlign? = null, hAlignment: PageNumberHorizontalAlign? = null, startingNumber: kotlin.Int? = null, sNumber: kotlin.Int? = null, fNumber: kotlin.Int? = null, margin: kotlin.Int? = null, fontSize: kotlin.Int? = null, format: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (vAlignment != null) {
                put("vAlignment", listOf(vAlignment.toString()))
            }
            if (hAlignment != null) {
                put("hAlignment", listOf(hAlignment.toString()))
            }
            if (startingNumber != null) {
                put("startingNumber", listOf(startingNumber.toString()))
            }
            if (sNumber != null) {
                put("sNumber", listOf(sNumber.toString()))
            }
            if (fNumber != null) {
                put("fNumber", listOf(fNumber.toString()))
            }
            if (margin != null) {
                put("margin", listOf(margin.toString()))
            }
            if (fontSize != null) {
                put("fontSize", listOf(fontSize.toString()))
            }
            if (format != null) {
                put("format", listOf(format.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/addnumber", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * 
     * 
     * @param fontReplacementsJson  (optional)
     * @param files  (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiChangeFontsPost(fontReplacementsJson: kotlin.String? = null, files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("fontReplacementsJson" to "$fontReplacementsJson", "files" to "$files")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/change-fonts", headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Compare documents text.
     * Compare provided files and create document with marked changes.
     * @param files  (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiComparisonPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/comparison", headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Compress document.
     * Compresses the provided files using the specified compression level.
     * @param files  (optional)
     * @param compressType The level of compression to use. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiCompressPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, compressType: CompressType? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (compressType != null) {
                put("compressType", listOf(compressType.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/compress", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Convert document to another format.
     * Converts the provided files from one format to another.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param xmlType The type of XML conversion to perform, if applicable. (optional)
     * @param xmlTag The XML tag to use for conversion, if applicable. (optional)
     * @param fontSise  (optional)
     * @param isToSingle Indicates whether the conversion should result in a single file, if applicable. (optional)
     * @param separator The separator to use when converting, if applicable. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiConvertPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, inputType: kotlin.String? = null, outputType: kotlin.String? = null, xmlType: XmlType? = null, xmlTag: kotlin.String? = null, fontSise: kotlin.Int? = null, isToSingle: kotlin.Boolean? = null, separator: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (inputType != null) {
                put("inputType", listOf(inputType.toString()))
            }
            if (outputType != null) {
                put("outputType", listOf(outputType.toString()))
            }
            if (xmlType != null) {
                put("xmlType", listOf(xmlType.toString()))
            }
            if (xmlTag != null) {
                put("xmlTag", listOf(xmlTag.toString()))
            }
            if (fontSise != null) {
                put("fontSise", listOf(fontSise.toString()))
            }
            if (isToSingle != null) {
                put("isToSingle", listOf(isToSingle.toString()))
            }
            if (separator != null) {
                put("separator", listOf(separator.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/convert", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Convert web page to document.
     * Converts a web page to the specified output format.
     * @param webPage  (optional)
     * @param outputType The desired format for the output file. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiConvertWebpagePost(webPage: kotlin.String? = null, outputType: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("webPage" to "$webPage")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (outputType != null) {
                put("outputType", listOf(outputType.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/convert-webpage", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Crop document.
     * Crops the provided files to the specified dimensions.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param top The number of pixels to crop from the top. (optional)
     * @param right The number of pixels to crop from the right. (optional)
     * @param bottom The number of pixels to crop from the bottom. (optional)
     * @param left The number of pixels to crop from the left. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiCropPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, inputType: kotlin.String? = null, top: kotlin.Int? = null, right: kotlin.Int? = null, bottom: kotlin.Int? = null, left: kotlin.Int? = null, outputType: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (inputType != null) {
                put("inputType", listOf(inputType.toString()))
            }
            if (top != null) {
                put("top", listOf(top.toString()))
            }
            if (right != null) {
                put("right", listOf(right.toString()))
            }
            if (bottom != null) {
                put("bottom", listOf(bottom.toString()))
            }
            if (left != null) {
                put("left", listOf(left.toString()))
            }
            if (outputType != null) {
                put("outputType", listOf(outputType.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/crop", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * File download.
     * Downloads processed file.
     * @param id The id of the processing to download. 
     * @param file The name of the file to download. (optional)
     * @return void
     */
    fun pdfWebapiDownloadIdGet(id: kotlin.String, file: kotlin.String? = null): Unit {
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (file != null) {
                put("file", listOf(file.toString()))
            }
        }
        val localVariableConfig = RequestConfig(
                RequestMethod.GET,
                "/pdf/webapi/download/{id}".replace("{" + "id" + "}", "$id"), query = localVariableQuery
        )
        val response = request<Any?>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> Unit
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Sign document with certificate.
     * Electronically signs the provided documents with the specified certificate.
     * @param passw  (optional)
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiEsignPost(passw: kotlin.String? = null, files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, inputType: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("passw" to "$passw", "files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (inputType != null) {
                put("inputType", listOf(inputType.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/esign", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Extract tables from document.
     * Extracts tables from the provided documents and converts them to the specified output format.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiExtractPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, inputType: kotlin.String? = null, outputType: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (inputType != null) {
                put("inputType", listOf(inputType.toString()))
            }
            if (outputType != null) {
                put("outputType", listOf(outputType.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/extract", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Fill form.
     * Fills a form with the provided files.
     * @param files  (optional)
     * @param fileName The name of the file to fill the form with. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiFormFillerPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, fileName: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (fileName != null) {
                put("fileName", listOf(fileName.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/form-filler", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Make GIF.
     * Creates a GIF from the provided images.
     * @param files  (optional)
     * @param keepImagesAsIs Indicates whether the images should be kept as is. (optional)
     * @param resizeToImage The index of the image to resize the other images to. (optional)
     * @param streched  (optional)
     * @param width The width of the GIF. (optional)
     * @param height The height of the GIF. (optional)
     * @param frameTimes The times for each frame in the GIF. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiGifPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, keepImagesAsIs: kotlin.Boolean? = null, resizeToImage: kotlin.Int? = null, streched: kotlin.Boolean? = null, width: kotlin.Int? = null, height: kotlin.Int? = null, frameTimes: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (keepImagesAsIs != null) {
                put("keepImagesAsIs", listOf(keepImagesAsIs.toString()))
            }
            if (resizeToImage != null) {
                put("resizeToImage", listOf(resizeToImage.toString()))
            }
            if (streched != null) {
                put("streched", listOf(streched.toString()))
            }
            if (width != null) {
                put("width", listOf(width.toString()))
            }
            if (height != null) {
                put("height", listOf(height.toString()))
            }
            if (frameTimes != null) {
                put("frameTimes", listOf(frameTimes.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/gif", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Calculate document hash.
     * Calculate hashes of provided files using the specified algorithm.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param alg The hashing algorithm to use. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiHashPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, inputType: kotlin.String? = null, outputType: kotlin.String? = null, alg: HashAlgorithm? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (inputType != null) {
                put("inputType", listOf(inputType.toString()))
            }
            if (outputType != null) {
                put("outputType", listOf(outputType.toString()))
            }
            if (alg != null) {
                put("alg", listOf(alg.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/hash", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Lock document.
     * Locks a document with the provided password and optional files.
     * @param files  (optional)
     * @param passw The password required to lock the resource. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiLockPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, passw: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (passw != null) {
                put("passw", listOf(passw.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/lock", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Merge documents.
     * Merges the provided files into a single document or image, with options for orientation and page size.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output file. (optional)
     * @param mergeType Type of merger operation. (optional)
     * @param horizontal The number of images to merge horizontally, if applicable. (optional)
     * @param vertical The number of images to merge vertically, if applicable. (optional)
     * @param pageSize The page size for the output file, if applicable. (optional)
     * @param dcIsLandscape Indicates whether the output file should be in landscape orientation. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiMergePost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, inputType: kotlin.String? = null, outputType: kotlin.String? = null, mergeType: MergeImageType? = null, horizontal: kotlin.Int? = null, vertical: kotlin.Int? = null, pageSize: PageSize? = null, dcIsLandscape: kotlin.Boolean? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (inputType != null) {
                put("inputType", listOf(inputType.toString()))
            }
            if (outputType != null) {
                put("outputType", listOf(outputType.toString()))
            }
            if (mergeType != null) {
                put("mergeType", listOf(mergeType.toString()))
            }
            if (horizontal != null) {
                put("horizontal", listOf(horizontal.toString()))
            }
            if (vertical != null) {
                put("vertical", listOf(vertical.toString()))
            }
            if (pageSize != null) {
                put("pageSize", listOf(pageSize.toString()))
            }
            if (dcIsLandscape != null) {
                put("dc_isLandscape", listOf(dcIsLandscape.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/merge", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Read and change document metadata.
     * Performs metadata operations on the provided files.
     * @param files  (optional)
     * @param operation The operation to perform on the metadata. (optional)
     * @param folder The folder where the files are located. (optional)
     * @param name The name of the file to perform the operation on. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiMetadataPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, operation: MetadataOperation? = null, folder: kotlin.String? = null, name: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (operation != null) {
                put("operation", listOf(operation.toString()))
            }
            if (folder != null) {
                put("folder", listOf(folder.toString()))
            }
            if (name != null) {
                put("name", listOf(name.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/metadata", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Organize document pages.
     * Organizes the provided documents by removing or moving specified pages.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param remove The pages to remove from the document. (optional)
     * @param move The pages to move within the document. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiOrganizePost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, inputType: kotlin.String? = null, remove: kotlin.String? = null, move: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (inputType != null) {
                put("inputType", listOf(inputType.toString()))
            }
            if (remove != null) {
                put("remove", listOf(remove.toString()))
            }
            if (move != null) {
                put("move", listOf(move.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/organize", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Parse document.
     * Parses the provided files using a parser service.
     * @param files  (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiParsePost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/parse", headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Redact document text.
     * Redacts specified text from the provided documents, with options to search case-sensitively, target in text, comments, and metadata.
     * @param files  (optional)
     * @param searchQuery The text to search for and redact. (optional)
     * @param replaceText The text to replace the found text with. (optional)
     * @param caseSensitive Indicates whether the search should be case-sensitive. (optional)
     * @param text Indicates whether text should be redacted. (optional)
     * @param comments Indicates whether comments should be redacted. (optional)
     * @param metadata Indicates whether metadata should be redacted. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiRedactPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, searchQuery: kotlin.String? = null, replaceText: kotlin.String? = null, caseSensitive: kotlin.Boolean? = null, text: kotlin.Boolean? = null, comments: kotlin.Boolean? = null, metadata: kotlin.Boolean? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (searchQuery != null) {
                put("searchQuery", listOf(searchQuery.toString()))
            }
            if (replaceText != null) {
                put("replaceText", listOf(replaceText.toString()))
            }
            if (caseSensitive != null) {
                put("caseSensitive", listOf(caseSensitive.toString()))
            }
            if (text != null) {
                put("text", listOf(text.toString()))
            }
            if (comments != null) {
                put("comments", listOf(comments.toString()))
            }
            if (metadata != null) {
                put("metadata", listOf(metadata.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/redact", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Remove stored files.
     * Removes processed files from storage.
     * @param id The ID of the processing to remove. 
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiRemoveIdPost(id: kotlin.String): FileResponse {
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/remove/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<FileResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Remove document annotations.
     * Removes annotations from the provided documents.
     * @param files  (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiRemovePost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/remove", headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Removes document watermark.
     * Removes a watermark from the document pages.
     * @param watermarkText  (optional)
     * @param top  (optional)
     * @param left  (optional)
     * @param bottom  (optional)
     * @param right  (optional)
     * @param files  (optional)
     * @param isAllPages Indicates whether the watermark should be removed from all pages. (optional)
     * @param watermarkType The type of watermark to remove. (optional)
     * @param removeRange The range of pages to remove the watermark from. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiRemoveWatermarkPost(watermarkText: kotlin.String? = null, top: kotlin.Int? = null, left: kotlin.Int? = null, bottom: kotlin.Int? = null, right: kotlin.Int? = null, files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, isAllPages: kotlin.Boolean? = null, watermarkType: WatermarkType? = null, removeRange: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("watermarkText" to "$watermarkText", "top" to "$top", "left" to "$left", "bottom" to "$bottom", "right" to "$right", "files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (isAllPages != null) {
                put("isAllPages", listOf(isAllPages.toString()))
            }
            if (watermarkType != null) {
                put("watermarkType", listOf(watermarkType.toString()))
            }
            if (removeRange != null) {
                put("removeRange", listOf(removeRange.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/remove-watermark", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Remove pages from document.
     * Removes specified pages from the provided files.
     * @param files  (optional)
     * @param removeRange The range of pages to remove from the files. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiRemovepagesPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, removeRange: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (removeRange != null) {
                put("removeRange", listOf(removeRange.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/removepages", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Repair document.
     * Repairs the provided files.
     * @param files  (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiRepairPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/repair", headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Resize document.
     * Resizes the provided files to the specified dimensions or using a preset size.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param resizeType The type of resizing to apply. (optional)
     * @param presetType The type of preset size to use for resizing. (optional)
     * @param presetSize The preset size to use for resizing. (optional)
     * @param width The desired width of the resized files. (optional)
     * @param height The desired height of the resized files. (optional)
     * @param percentage The percentage to resize the files by. (optional)
     * @param useProportions Indicates whether to maintain the aspect ratio when resizing. (optional)
     * @param pageSize The page size to use for the resized files. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiResizePost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, inputType: kotlin.String? = null, outputType: kotlin.String? = null, resizeType: ResizeType? = null, presetType: ResizePresetType? = null, presetSize: ResizePresetSize? = null, width: kotlin.Int? = null, height: kotlin.Int? = null, percentage: kotlin.Int? = null, useProportions: kotlin.Boolean? = null, pageSize: ResizePageSize? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (inputType != null) {
                put("inputType", listOf(inputType.toString()))
            }
            if (outputType != null) {
                put("outputType", listOf(outputType.toString()))
            }
            if (resizeType != null) {
                put("resizeType", listOf(resizeType.toString()))
            }
            if (presetType != null) {
                put("presetType", listOf(presetType.toString()))
            }
            if (presetSize != null) {
                put("presetSize", listOf(presetSize.toString()))
            }
            if (width != null) {
                put("width", listOf(width.toString()))
            }
            if (height != null) {
                put("height", listOf(height.toString()))
            }
            if (percentage != null) {
                put("percentage", listOf(percentage.toString()))
            }
            if (useProportions != null) {
                put("useProportions", listOf(useProportions.toString()))
            }
            if (pageSize != null) {
                put("pageSize", listOf(pageSize.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/resize", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Rotate document.
     * Rotates the provided files by a specified angle, with options for rotation type and page number.
     * @param files  (optional)
     * @param angle The angle by which to rotate the files. (optional)
     * @param rotateType The type of rotation to perform. (optional)
     * @param pageNum The page number to rotate, if applicable. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiRotatePost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, angle: RotateAngle? = null, rotateType: RotateType? = null, pageNum: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (angle != null) {
                put("angle", listOf(angle.toString()))
            }
            if (rotateType != null) {
                put("rotateType", listOf(rotateType.toString()))
            }
            if (pageNum != null) {
                put("pageNum", listOf(pageNum.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/rotate", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Search document text.
     * Searches the provided files for the specified query and makr found text with yellow background.
     * @param files  (optional)
     * @param query The text to search for within the files. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiSearchPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, query: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (query != null) {
                put("query", listOf(query.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/search", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Make scanned pdf searchable.
     * Converts the provided files into a searchable PDF format for the specified language.
     * @param files  (optional)
     * @param lang The language of the files to be converted. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiSearchablePost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, lang: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (lang != null) {
                put("lang", listOf(lang.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/searchable", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Add signature to document.
     * Adds a signature, text and image to the provided documents.
     * @param image  (optional)
     * @param text  (optional)
     * @param textColor  (optional)
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param signatureType The type of signature to add. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiSignaturePost(image: kotlin.String? = null, text: kotlin.String? = null, textColor: kotlin.String? = null, files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, inputType: kotlin.String? = null, outputType: kotlin.String? = null, signatureType: SignatureType? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("image" to "$image", "text" to "$text", "textColor" to "$textColor", "files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (inputType != null) {
                put("inputType", listOf(inputType.toString()))
            }
            if (outputType != null) {
                put("outputType", listOf(outputType.toString()))
            }
            if (signatureType != null) {
                put("signatureType", listOf(signatureType.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/signature", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Split document.
     * Splits the provided documents based on the specified split type and page rage to spit.
     * @param files  (optional)
     * @param splitType The type of splitting to be performed. (optional)
     * @param pairs Optional page rage for the splitting operation. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiSplitdocPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, splitType: SplitDocType? = null, pars: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (splitType != null) {
                put("splitType", listOf(splitType.toString()))
            }
            if (pairs != null) {
                put("pairs", listOf(pairs.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/splitdoc", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Split image.
     * Splits the provided images into smaller parts based on the specified parameters.
     * @param files  (optional)
     * @param splitType The type of splitting to be performed. (optional)
     * @param vertical The number of vertical splits to create. (optional)
     * @param horizontal The number of horizontal splits to create. (optional)
     * @param outputType The desired output format for the split images. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiSplitimagePost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, splitType: SplitImageType? = null, vertical: kotlin.Int? = null, horizontal: kotlin.Int? = null, outputType: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (splitType != null) {
                put("splitType", listOf(splitType.toString()))
            }
            if (vertical != null) {
                put("vertical", listOf(vertical.toString()))
            }
            if (horizontal != null) {
                put("horizontal", listOf(horizontal.toString()))
            }
            if (outputType != null) {
                put("outputType", listOf(outputType.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/splitimage", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Processing status.
     * Retrieves the status of a processing.
     * @param id The ID of the processing to check the status of. 
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiStatusIdPost(id: kotlin.String): FileResponse {
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/status/{id}".replace("{" + "id" + "}", "$id")
        )
        val response = request<FileResponse>(
                localVariableConfig
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Unlock document.
     * Attempts to unlock a document with an password and associated files.
     * @param files  (optional)
     * @param passw The password used in locked document. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiUnlockPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, passw: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (passw != null) {
                put("passw", listOf(passw.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/unlock", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Verify document certificate.
     * Verifies the electronic signature of the provided files.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiVerifyEsignPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, inputType: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (inputType != null) {
                put("inputType", listOf(inputType.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/verify_esign", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Add watermark to document.
     * Adds a watermark to the provided files.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @param outputType The desired format for the output files. (optional)
     * @param isColored Indicate is watermark will be in color or grayscale. (optional)
     * @param isText Indicates whether the watermark is text. (optional)
     * @param text The text of the watermark. (optional)
     * @param name The name of the font for the text watermark. (optional)
     * @param size The size of the font for the text watermark. (optional)
     * @param bold Indicates whether the text watermark is bold. (optional)
     * @param italic Indicates whether the text watermark is italic. (optional)
     * @param underlined Indicates whether the text watermark is underlined. (optional)
     * @param color The color of the text or image watermark. (optional)
     * @param isBackground Indicates whether the watermark is a background watermark. (optional)
     * @param rotation The rotation angle of the watermark. (optional)
     * @param transparency The transparency of the watermark. (optional)
     * @param layer Indicates whether the watermark is a layer. (optional)
     * @param pageFrom The starting page number for the watermark. (optional)
     * @param pageTo The ending page number for the watermark. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiWatermarkPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, inputType: kotlin.String? = null, outputType: kotlin.String? = null, isColored: kotlin.Boolean? = null, isText: kotlin.Boolean? = null, text: kotlin.String? = null, name: kotlin.String? = null, size: kotlin.Int? = null, bold: kotlin.Boolean? = null, italic: kotlin.Boolean? = null, underlined: kotlin.Boolean? = null, color: kotlin.String? = null, isBackground: kotlin.Boolean? = null, rotation: kotlin.Int? = null, transparency: kotlin.Float? = null, layer: kotlin.Boolean? = null, pageFrom: kotlin.Int? = null, pageTo: kotlin.Int? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (inputType != null) {
                put("inputType", listOf(inputType.toString()))
            }
            if (outputType != null) {
                put("outputType", listOf(outputType.toString()))
            }
            if (isColored != null) {
                put("isColored", listOf(isColored.toString()))
            }
            if (isText != null) {
                put("isText", listOf(isText.toString()))
            }
            if (text != null) {
                put("text", listOf(text.toString()))
            }
            if (name != null) {
                put("name", listOf(name.toString()))
            }
            if (size != null) {
                put("size", listOf(size.toString()))
            }
            if (bold != null) {
                put("bold", listOf(bold.toString()))
            }
            if (italic != null) {
                put("italic", listOf(italic.toString()))
            }
            if (underlined != null) {
                put("underlined", listOf(underlined.toString()))
            }
            if (color != null) {
                put("color", listOf(color.toString()))
            }
            if (isBackground != null) {
                put("isBackground", listOf(isBackground.toString()))
            }
            if (rotation != null) {
                put("rotation", listOf(rotation.toString()))
            }
            if (transparency != null) {
                put("transparency", listOf(transparency.toString()))
            }
            if (layer != null) {
                put("layer", listOf(layer.toString()))
            }
            if (pageFrom != null) {
                put("pageFrom", listOf(pageFrom.toString()))
            }
            if (pageTo != null) {
                put("pageTo", listOf(pageTo.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/watermark", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Count words and chars in document.
     * Counts the words in the provided files within the specified page range.
     * @param files  (optional)
     * @param pageRange The range of pages to count words in. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiWordcounterPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, pageRange: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (pageRange != null) {
                put("pageRange", listOf(pageRange.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/wordcounter", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
    /**
     * Convert XFA format to a another format.
     * Converts the provided documents from XFA format to a different format.
     * @param files  (optional)
     * @param inputType The format of the input files. (optional)
     * @return FileResponse
     */
    @Suppress("UNCHECKED_CAST")
    fun pdfWebapiXfaconvertPost(files: kotlin.Array<kotlin.Array<kotlin.Byte>>? = null, inputType: kotlin.String? = null): FileResponse {
        val localVariableBody: kotlin.Any? = mapOf("files" to "$files")
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>().apply {
            if (inputType != null) {
                put("inputType", listOf(inputType.toString()))
            }
        }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "multipart/form-data")
        localVariableHeaders["Accept"] = "text/plain, application/json, text/json"
        val localVariableConfig = RequestConfig(
                RequestMethod.POST,
                "/pdf/webapi/xfaconvert", query = localVariableQuery, headers = localVariableHeaders
        )
        val response = request<FileResponse>(
                localVariableConfig, localVariableBody
        )

        return when (response.responseType) {
            ResponseType.Success -> (response as Success<*>).data as FileResponse
            ResponseType.Informational -> TODO()
            ResponseType.Redirection -> TODO()
            ResponseType.ClientError -> throw ClientException((response as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((response as ServerError<*>).message ?: "Server error")
        }
    }
}
